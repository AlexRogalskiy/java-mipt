#. extracted from ./slides03/src/main/asciidoc/lecture.adoc
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 11:39+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 2.2.5\n"

#: ./slides03/src/main/asciidoc/lecture.adoc:25
msgid ""
"= Core Java: Курс лекций. Лекция 3\n"
"Иван Пономарёв, КУРС/МФТИ\n"
":revealjs_theme: black\n"
":revealjs_customtheme: white_course.css\n"
":revealjs_slideNumber:\n"
":revealjs_history:\n"
":revealjs_progress:\n"
":encoding: UTF-8\n"
":lang: ru\n"
"include::_doc_general_attributes.adoc[]\n"
":doctype: article\n"
":toclevels: 3\n"
":imagesdir: images\n"
":source-highlighter: highlightjs\n"
":highlightjsdir: highlight\n"
":icons: font\n"
":iconfont-remote!:\n"
":iconfont-name: font-awesome-4.7.0/css/font-awesome\n"
":revealjs_mouseWheel: true\n"
":revealjs_center: false\n"
":revealjs_transition: none\n"
":revealjs_width: 1600\n"
":revealjs_height: 900\n"
":stem: latexmath"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:28
msgid ""
"//== Часть 1. Введение\n"
":!figure-caption:"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:30
msgid "ponomarev@corchestra.ru"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:32
msgid "icon:twitter[size=lg] @inponomarev"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:36
msgid ""
"[%notitle]\n"
"== Три главных слова\n"
"image::thethreewords.jpg[{image-50-width}]"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:38
msgid "== Всё есть класс"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:42
msgid ""
"* Любой код -- метод некоторого класса\n"
"* Любые данные хранятся в полях некоторого класса\n"
"* Любые типы данных (исключая примитивные, но включая массивы) -- наследники "
"класса `Object`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:44
msgid "== Классы помещаются в пакеты"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:50
msgid ""
"* `edu.phystech.foo`\n"
"* `edu.phystech.foo.bar`\n"
"* Каждый .java-файл начинается с объявления пакета: +\n"
"`package edu.phystech.hello;`\n"
"* В корне пакета может быть `package-info.java`, не содержащий классы, а "
"только JavaDoc над ключевым словом `package`."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:53
msgid ""
"* <Имя пакета>.<имя класса> задаёт полный идентификатор любого класса, "
"доступного в исходном коде или через библиотеки (например, "
"`edu.phystech.hello.App`)\n"
"* Вложенные пакеты -- это _разные_ пакеты с точки зрения Java (package-"
"private классы одного пакета не будут видны в другом)"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:55
msgid "== Структура класса: переменные, конструкторы и методы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:71
msgid ""
"[source, java]\n"
"----\n"
"class ClassName\n"
"{\n"
"   field1\n"
"   field2\n"
"   . . .\n"
"   constructor1\n"
"   constructor2\n"
"   . . .\n"
"   method1\n"
"   method2\n"
"   . . .\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:73
msgid "== Определяем класс"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:96
msgid ""
"[source,java]\n"
"----\n"
"package org.megacompany.staff;\n"
"class Employee {\n"
"  // instance fields\n"
"  private String name;\n"
"  private double salary;\n"
"  private LocalDate hireDay;\n"
"  // constructor\n"
"  public Employee(String n, double s, int year, int month, int day) {\n"
"    name = n;\n"
"    salary = s;\n"
"    hireDay = LocalDate.of(year, month, day);\n"
"  }\n"
"  // a method\n"
"  public String getName() {\n"
"    return name;\n"
"  }\n"
"  // more methods\n"
"  . . .\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:98
msgid "== Создаём и используем экземпляры класса"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:103
msgid ""
"[source,java]\n"
"----\n"
"//При необходимости, импортируем\n"
"import org.megacompany.staff.Employee;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:108
msgid ""
"//где-то в теле метода\n"
". . .\n"
"Employee hacker = new Employee(\"Harry Hacker\", 50000, 1989, 10, 1);\n"
"Employee tester = new Employee(\"Tommy Tester\", 40000, 1990, 3, 15);"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:111
msgid ""
"hacker.getName(); //returns \"Harry Hacker\"\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:113
msgid "== Про инициализацию полей"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:115
msgid ""
"* В отличие от локальных переменных, поля можно не инициализировать явно."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:117
msgid ""
"* В этом случае примитивные типы получают значение по умолчанию (`0`, "
"`false`), а поля со ссылками -- значение `null`."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:120
msgid ""
"* Проинициализировать поле по месту его определения не возбраняется: +\n"
"`int a = 42` или даже `int a = getValue()`. "
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:122
msgid "== Поле this"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:126
msgid ""
"[source,java]\n"
"----\n"
"{ ..."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:128
msgid "  int value;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:133
msgid ""
"  setValue(int value) {\n"
"    //поле перекрыто аргументом\n"
"    this.value = value;\n"
"  }"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:139
msgid ""
"  registerMe(Registrator r) {\n"
"    //нужна ссылка на себя\n"
"    r.register(this); \n"
"  }\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:141
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:141"
msgid "----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:144
msgid "== Объект передаётся по ссылке!"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:149
msgid ""
"[source,java]\n"
"----\n"
"public class Employee {\n"
"    int age = 18;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:157
msgid ""
"    public static void main(String[] args) {\n"
"        Employee e = new Employee();\n"
"        int a = 1;\n"
"        foo(e, a);\n"
"        System.out.printf(\"%d - %d\", e.age, a);\n"
"        //prints 42 - 1\n"
"    }"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:165
msgid ""
"    static void foo(Employee e, int a) {\n"
"        //e passed by reference, a passed by value\n"
"        e.age = 42;\n"
"        a = 5;\n"
"    }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:167
msgid "== Рождение, жизнь и смерть объекта"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:170
msgid ""
"[source,java]\n"
"new Employee(\"Bob\")"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:179
msgid ""
"[graphviz, \"life1.png\"]\n"
"-----\n"
"digraph G {\n"
" graph [ dpi = 200 ]; \n"
" rankdir=\"LR\";\n"
" object[shape=\"octagon\",label=\"Bob\"]\n"
"}\n"
"-----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:182
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:182"
msgid "== Присвоение ссылки"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:185
msgid ""
"[source,java]\n"
"Employee hacker = new Employee(\"Bob\");"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:196
msgid ""
"[graphviz, \"life2.png\"]\n"
"-----\n"
"digraph G {\n"
" graph [ dpi = 200 ]; \n"
" rankdir=\"LR\";\n"
" object[shape=\"octagon\",label=\"Bob\"]\n"
" ref[label=\"hacker\"];\n"
" ref->object;\n"
"}\n"
"-----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:198
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:198"
msgid "== Присвоение ссылки"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:201
msgid ""
"[source,java]\n"
"Employee junior = hacker;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:212
msgid ""
"[graphviz, \"life3.png\"]\n"
"-----\n"
"digraph G {\n"
" graph [ dpi = 200 ]; \n"
" rankdir=\"LR\";\n"
" object[shape=\"octagon\",label=\"Bob\"]\n"
" ref[label=\"hacker\"];\n"
" ref2[label=\"junior\"];\n"
" ref->object;\n"
" ref2->object;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:215
msgid ""
"}\n"
"-----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:217
msgid "== Потеря ссылки"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:221
msgid ""
"[source,java]\n"
"hacker = null;\n"
"junior = new Employee(\"Charlie\");"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:238
msgid ""
"[graphviz, \"life4.png\"]\n"
"-----\n"
"digraph G {\n"
" graph [ dpi = 200 ]; \n"
" rankdir=\"LR\";\n"
" object[shape=\"octagon\",label=\"Bob\", fillcolor=\"grey\",style=\"filled\"]"
"\n"
" object2[shape=\"octagon\",label=\"Charlie\"]\n"
" ref[label=\"hacker\"];\n"
" ref2[label=\"junior\"];\n"
" ref->null;\n"
" ref2->object2;\n"
" null[shape=\"circle\"];\n"
" ref3[style=\"invis\"];\n"
" ref3->object[style=\"invis\"];\n"
"}\n"
"-----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:241
msgid "== Сборка мусора"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:258
msgid ""
"[graphviz, \"life5.png\"]\n"
"-----\n"
"digraph G {\n"
" graph [ dpi = 200 ]; \n"
" rankdir=\"LR\";\n"
" object[shape=\"octagon\",label=\"Bob\", fillcolor=\"red\",style=\"invis\"]\n"
" object2[shape=\"octagon\",label=\"Charlie\"]\n"
" ref[label=\"hacker\"];\n"
" ref2[label=\"junior\"];\n"
" ref->null;\n"
" ref2->object2;\n"
" null[shape=\"circle\"];\n"
" ref3[style=\"invis\"];\n"
" ref3->object[style=\"invis\"];\n"
"}\n"
"-----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:262
msgid "== Области видимости"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:271
msgid ""
"[cols=\"40a,60a\"]\n"
"|===\n"
"| *Область видимости* | *Кому доступно*\n"
"| `private`       | только классу\n"
"| package-private | только пакету (по умолчанию)\n"
"| `protected`     | классу, пакету, и классам-наследникам\n"
"| `public`        | всем\n"
"|==="
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:273
msgid "== Файлы с исходным кодом и классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:276
msgid ""
"* В одном .java файле может быть один публичный класс, названный так же, как "
"и .java-файл (`public class Foo` в файле `Foo.java`).\n"
"* Может быть сколько угодно package-private-классов, но это скорее плохая "
"практика."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:278
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:278"
msgid "== Наследование"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:296
msgid ""
"[plantuml, employeemanager, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 200 \n"
"class Employee {\n"
"  - name\n"
"  - salary\n"
"  + getName()\n"
"  + getSalary()\n"
"}\n"
"class Manager {\n"
"  - bonus\n"
"  + setBonus(bonus)\n"
"}\n"
"Employee <|- Manager\n"
"@enduml\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:307
msgid ""
"[source,java]\n"
"----\n"
"public class Manager extends Employee {\n"
"  private double bonus;\n"
"  . . .\n"
"  public void setBonus(double bonus) {\n"
"    this.bonus = bonus;\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:309
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:309"
msgid "== Наследование"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:319
msgid ""
"[source,java]\n"
"----\n"
"// construct a Manager object\n"
"Manager boss = new Manager(\"Carl Cracker\", 80000, 1987, 12, 15);\n"
"boss.setBonus(5000);\n"
"Employee[] staff = new Employee[3];\n"
"staff[0] = boss;\n"
"staff[1] = new Employee(\"Harry Hacker\", 50000, 1989, 10, 1);\n"
"staff[2] = new Employee(\"Tommy Tester\", 40000, 1990, 3, 15);"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:323
msgid ""
"for (Employee e : staff)\n"
"  System.out.println(\"name=\" + e.getName() + \",salary=\" + e.getSalary());"
"\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:325
msgid "== Наследование: единственный родительский класс"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:336
msgid ""
"[plantuml, columnclasses, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 200 \n"
"Employee <|-- Manager\n"
"Employee <|-- Secretary\n"
"Employee <|-- Programmer\n"
"Manager  <|-- Executive\n"
"@enduml\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:338
msgid "== Тип ссылки и тип объекта"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:347
msgid ""
"[plantuml, employeemanagerex, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 200 \n"
"Employee <|- Manager \n"
"Manager <|- Executive\n"
"@enduml\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:357
msgid ""
"[source,java]\n"
"----\n"
"  Executive ex = new Executive (...);\n"
"  //для ex доступны члены, объявленные в Manager, Employee и Executive\n"
"  Manager m = ex;\n"
"  //для m доступны члены, объявленные в Employee и Manager\n"
"  Employee e = m;\n"
"  //для e доступны члены, объявленные только в Employee\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:359
msgid "== Переопределение (overriding) методов"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:371
msgid ""
"[source,java]\n"
"----\n"
"class Employee {\n"
"  private int salary;\n"
"  public int getSalary() {\n"
"    return salary;\n"
"  }\n"
"  public int getTotalPayout(){\n"
"    return getSalary();\n"
"  }\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:380
msgid ""
"class Manager extends Employee {\n"
"  private int bonus;\n"
"  @Override //не обязательная, но крайне желательная штука\n"
"  public int getTotalPayout() {\n"
"    return getSalary() + bonus;\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:382
msgid "== Использование `super`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:393
msgid ""
"[source,java]\n"
"----\n"
"class Manager extends Employee {\n"
"  private int bonus;\n"
"  @Override \n"
"  public int getTotalPayout() {\n"
"    return super.getTotalPayout() + bonus;\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:395
msgid ""
"В отличие от `this`, `super` не указывает ни на какой объект (и его нельзя "
"никуда передать). Это лишь указание компилитору вызвать метод суперкласса."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:397
msgid "== Ковариантность возвращаемых типов"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:401
msgid ""
"[plantuml, overriding, png]\n"
"----\n"
"@startuml"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:403
msgid "skinparam dpi 200 "
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:407
msgid ""
"class Producer {\n"
"    + Object produce() \n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:409
msgid "Producer <|-- IntegerProducer"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:413
msgid ""
"class IntegerProducer {\n"
"    + Integer produce()\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:416
msgid "Object <|-- Integer"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:419
msgid ""
"Producer . Object\n"
"IntegerProducer . Integer"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:422
msgid ""
"@enduml\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:425
msgid ""
"* Возвращаемый тип может быть того же типа или субтипа\n"
"* Типы аргументов обязаны совпадать"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:427
msgid "== `final`-классы и методы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:434
msgid ""
"* Ключевое слово `final`:\n"
"** на уровне класса запрещает наследование класса\n"
"** на уровне метода запрещает наследование метода \n"
"* Зачем это нужно?\n"
"** Паттерн \"Шаблонный метод\"\n"
"** J. Bloch: 'Design and document for inheritance, or else prohibit it'"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:436
msgid "== `sealed`-типы (Java 15+)"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:438
msgid "Наследоваться можно, но только тем, кому разрешено:"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:446
msgid ""
"[source,java]\n"
"----\n"
"public sealed class Pet \n"
"        permits \n"
"        //никакие другие не могут наследоваться от него\n"
"        Cat, Dog, Fish {\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:448
msgid "public final Cat {...}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:450
msgid "public sealed Dog permits Hound, Terrier, Toy {...}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:453
msgid ""
"public non-sealed Fish {...}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:455
msgid "== Важный пример: `sealed`-интерфейсы и record-ы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:457
msgid ""
"Пока не знаем ни что такое interface, ни что такое record, но просто "
"запомним: "
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:462
msgid ""
"[source,java]\n"
"----\n"
"public sealed interface Expr\n"
"        permits Add, Subtract, Multiply, Divide, Literal {}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:470
msgid ""
"//implicitly final!\n"
"public record Add(Expr left, Expr right) implements Expr {}\n"
"public record Subtract(Expr left, Expr right) implements Expr {}\n"
"public record Multiply(Expr left, Expr right) implements Expr {}\n"
"public record Divide(Expr left, Expr right) implements Expr {}\n"
"public record Literal(int value) implements Expr {}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:473
msgid "== Перегрузка (overloading) методов"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:489
msgid ""
"Сигнатура метода определяется его названием и типами аргументов:\n"
"[source,java]\n"
"----\n"
"//org.junit.jupiter.api.Assertions\n"
"void assertEquals(short expected, short actual)\n"
"void assertEquals(short expected, short actual, String message)\n"
"void assertEquals(short expected, short actual, Supplier<String> "
"messageSupplier)\n"
"void assertEquals(byte expected, byte actual)\n"
"void assertEquals(byte expected, byte actual, String message)\n"
"void assertEquals(byte expected, byte actual, Supplier<String> "
"messageSupplier)\n"
"void assertEquals(int expected, int actual)\n"
"void assertEquals(int expected, int actual, String message)\n"
"void assertEquals(int expected, int actual, Supplier<String> messageSupplier)"
"\n"
". . .\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:491
msgid "== Статические поля и методы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:507
msgid ""
"Данные, общие для всех экземпляров класса:\n"
"[source,java]\n"
"----\n"
"class Employee {\n"
"  /*WARNING: данный пример\n"
"  не работает при многопоточном исполнении*/\n"
"  private static int nextId = 1;\n"
"  private int id;\n"
"  . . .\n"
"  public void setId() {\n"
"    id = nextId;\n"
"    nextId++;\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:510
msgid "== Статические константы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:519
msgid ""
"Выделяем память один раз\n"
"[source,java]\n"
"----\n"
"public class Math {\n"
"   . . .\n"
"   public static final double PI = 3.14159265358979323846;\n"
"   . . .\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:522
msgid ". . ."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:525
msgid ""
"Math.PI // возвращает 3.14...\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:527
msgid "== Статические методы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:532
msgid ""
"Статическим методам доступны только статические переменные и вызовы других "
"статических методов\n"
"[source,java]\n"
"----\n"
"class Employee {"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:540
msgid ""
"  private static int nextId = 1;\n"
"  private int id;\n"
"  . . .\n"
"  public static int getNextId() {\n"
"    return nextId; // returns static field\n"
"  }\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:543
msgid ""
". . .\n"
"Employee.nextId() //имя класса вместо объекта"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:545
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:545"
msgid "----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:547
msgid "== psvm"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:557
msgid ""
"Теперь мы понимаем: метод main доступен всем и не требует инстанцирования "
"объекта:\n"
"[source,java]\n"
"----\n"
"public class App {\n"
"  public static void main(String... args) {\n"
"     System.out.println(\"Hello, world!\");\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:559
msgid "== Конструктор"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:567
msgid ""
"[source,java]\n"
"----\n"
"public class Person {\n"
"    //public-конструктор без аргументов\n"
"    public Person() {\n"
"       ....\n"
"    }"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:574
msgid ""
"    //package-private конструктор с аргументом\n"
"    Person(String  name) {\n"
"        ....\n"
"    }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:576
msgid "== Конструкторы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:578
msgid "* Конструктор _обязан_ быть."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:580
msgid ""
"* Если мы 1) явно не написали конструктор, 2) родительский класс имеет "
"конструктор без аргументов -- то неявным образом у класса появляется "
"публичный конструктор без аргументов по умолчанию."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:582
msgid ""
"* Если мы явно написали хотя бы один конструктор,  конструктор по умолчанию "
"_исчезает_."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:584
msgid ""
"* Если в родительском классе нет конструктора без аргументов, конструктор по "
"умолчанию _не создаётся_."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:586
msgid "* Конструктор _не обязан быть публичным_."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:588
msgid "== Переопределение конструкторов при наследовании классов"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:590
msgid ""
"* Если у суперкласса нет конструктора без аргументов, первым вызовом должен "
"быть `super(...)`. "
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:598
msgid ""
"[source,java]\n"
"----\n"
"public class Person {\n"
"    Person(String  name){\n"
"        ...\n"
"    }\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:606
msgid ""
"class Employee extends Person{\n"
"    Employee(String name) {\n"
"        super(name);\n"
"        ...\n"
"    }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:608
msgid "== Перегрузка конструкторов"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:610
msgid "* Вызов `this(...)`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:617
msgid ""
"[source,java]\n"
"----\n"
"public class Person {\n"
"    Person(String  name){\n"
"        ...\n"
"    }"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:623
msgid ""
"    Person(){\n"
"        this(\"unknown\");\n"
"    }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:630
msgid ""
"== Секции инициализации\n"
"[source,java]\n"
"----\n"
"class Employee {\n"
"  private static int nextId;\n"
"  private int id;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:635
msgid ""
"  // static initialization block\n"
"  static {\n"
"    nextId = ThreadLocalRandom.current().nextInt(10000);\n"
"  }"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:643
msgid ""
"  // object initialization block\n"
"  {\n"
"    id = nextId;\n"
"    nextId++;\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:645
msgid "== А как же деструктор?"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:649
msgid ""
"* А его нет!\n"
"* Даже не пытайтесь переопределять `finalize`\n"
"* Почему метод `finalize` оказался плохой идеей"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:651
msgid "== Абстрактные классы и методы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:657
msgid ""
"[plantuml, abstractsample, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 120 \n"
"abstract class Person"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:662
msgid ""
"Person <|-- Student\n"
"Person <|-- Employee\n"
"@enduml\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:676
msgid ""
"[source,java]\n"
"----\n"
"public abstract class Person\n"
"{\n"
"  public Person(String name) {\n"
"    this.name = name;\n"
"  }\n"
"  public String getName() {\n"
"    return name;\n"
"  }\n"
"  public abstract String getDescription();\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:693
msgid ""
"== Реализация абстрактного класса\n"
"[source,java]\n"
"----\n"
"public class Student extends Person\n"
"{\n"
"  private String major;\n"
"  public Student(String name, String major) {\n"
"    super(name);\n"
"    this.major = major;\n"
"  }\n"
"  @Override\n"
"  public String getDescription() {\n"
"    return \"a student majoring in \" + major;\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:695
msgid "== Правила"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:702
msgid ""
"* Класс, в котором хотя бы один из методов не реализован, должен быть "
"помечен как `abstract`\n"
"* Нереализованные методы в классе возникают двумя способами:\n"
"** явно объявлены как `abstract`\n"
"** унаследованы из абстрактных классов или интерфейсов и не переопределены.\n"
"* Абстрактные классы нельзя инстанцировать через new.\n"
"** `new Person(\"John Doe\");` -- ошибка компиляции: 'Person is abstract, "
"cannot be instantiated'."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:705
msgid "== Интерфейсы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:713
msgid ""
"[source,java]\n"
"----\n"
"//его нельзя инстацировать!\n"
"public interface Prism\n"
"{\n"
"   //это --- final-переменная!\n"
"   double PI = 3.14;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:717
msgid ""
"   //это --- публичные абстрактные методы!\n"
"   double getArea();\n"
"   double getHeight();"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:724
msgid ""
"   //этот метод может вызывать другие и читать final-поля\n"
"   default double getVolume() {\n"
"      return getArea() * getHeight();\n"
"   }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:726
msgid "== Реализация интерфейса"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:737
msgid ""
"[source,java]\n"
"----\n"
"puplic class Parallelepiped implements Prism {\n"
"    private double a;\n"
"    private double b;\n"
"    private double h;\n"
"    @Override\n"
"    public double getArea() {\n"
"        return a * b;\n"
"    }"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:745
msgid ""
"    @Override\n"
"    public double getHeight() {\n"
"        return h;\n"
"    }\n"
"}\n"
"----\n"
"Если какой-то из методов интерфейса не будет переопределён, класс нужно "
"пометить как abstract."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:747
msgid "== Чем интерфейсы отличаются от абстрактных классов?"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:751
msgid ""
"* Нет внутреннего состояния и конструкторов\n"
"* Можно наследоваться (`extends`) только от одного класса, но реализовывать "
"(`implements`) сколько угодно интерфейсов -- _множественное наследование_.\n"
"* Поэтому как абстракция, интерфейс предпочтительнее."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:754
msgid "== Оператор instanceof"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:770
msgid ""
"[plantuml, instanceof, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 150 \n"
"class C1\n"
"class C2\n"
"class C3\n"
"interface I1\n"
"C1 <|-- C2\n"
"I1 <|.. C2\n"
"@enduml\n"
"----\n"
"[source,java]\n"
"----\n"
"C1 c1; C2 c2; C3 c3; I1 i1;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:777
msgid ""
"x instanceof A //  false, если x == null\n"
"c1 instanceof С2 // true или false\n"
"i1 instanceof C2 // true или false \n"
"c2 instanceof C1 // всегда возвращает true\n"
"с3 instanceof C2 // не скомпилируется\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:779
msgid "== Приведение типов (до Java 14)"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:790
msgid ""
"[source,java]\n"
"----\n"
"Person p = . . .;\n"
"if (p instanceof Student) {\n"
"    //если не защитить instanceof, возможен ClassCastException\n"
"    Student s = (Student) p;\n"
"    . . .\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:792
msgid "== Pattern Matching for instanceof (Java 14+, JEP305)"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:803
msgid ""
"[source,java]\n"
"----\n"
"Person p = . . .;\n"
"if (p instanceof Student s) {\n"
"   //здесь доступна переменная Student s\n"
"    . . .\n"
"} else {\n"
"   //здесь недоступна переменная Student s\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:809
msgid ""
"//Скомпилируется\n"
"if (obj instanceof String s && s.length() > 5) { \n"
"   . . .\n"
"   s.contains(..)\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:813
msgid ""
"//НЕ скомпилируется\n"
"if (obj instanceof String s || s.length() > 5) {...}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:815
msgid "== Все меньше избыточного кода"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:823
msgid ""
"[source,java]\n"
"----\n"
"//Before Java 10\n"
"if (obj instanceof Number) {\n"
"  Number n = (Number) obj;\n"
"  System.out.println(n.longValue());\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:829
msgid ""
"//Java 10+\n"
"if (obj instanceof Number) {\n"
"  var n = (Number) obj;\n"
"  System.out.println(n.longValue());\n"
"}"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:835
msgid ""
"//Java 14+\n"
"if (obj instanceof Number n) {\n"
"  System.out.println(n.longValue());\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:837
msgid "== Pattern matching for switch (JEP406, preview feature in Java 17)"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:851
msgid ""
"[source,java]\n"
"----\n"
"public int calculate(Expr expr) {\n"
"  return switch (expr) {\n"
"    //Не скомпилируется, если мы забудем что-то из реализаций Expr!\n"
"    case Literal l -> l.value();\n"
"    case Divide d -> calculate(d.left()) / calculate(d.right());\n"
"    case Multiply m -> calculate(m.left()) * calculate(m.right());\n"
"    case Add a -> calculate(a.left()) + calculate(a.right());\n"
"    case Subtract s -> calculate(s.left()) - calculate(s.right());\n"
"  };\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:853
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:853"
msgid "== Вложенные классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:870
msgid ""
"[source, java]\n"
"----\n"
"class Outer { \n"
"   int field = 42; \n"
"   class Inner { \n"
"      public void show() { \n"
"           //есть доступ к состоянию внешнего класса!\n"
"           System.out.println(field);\n"
"           //печатает 42\n"
"      } \n"
"   } \n"
"   void initInner(){\n"
"     //инициализация вложенного класса внутри\n"
"     new Inner();\n"
"   }\n"
"} "
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:874
msgid ""
"//инициализация вложенного класса извне\n"
"Outer.Inner in = new Outer().new Inner(); \n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:876
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:876"
msgid "== Вложенные классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:878
msgid "Каждый экземпляр `Inner` имеет неявную ссылку на `Outer`."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:888
msgid ""
"[plantuml, inner, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 200 \n"
"class Outer\n"
"class Inner\n"
"Outer *-- Inner\n"
"@enduml\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:890
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:890"
msgid "== Вложенные классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:905
msgid ""
"[source, java]\n"
"----\n"
"class Outer { \n"
"   int field = 42; \n"
"   class Inner { \n"
"      //поле вложенного класса перекрывает поле внешнего класса \n"
"      int field = 18;\n"
"      public void show() {\n"
"           System.out.println(field);\n"
"           //печатает 18\n"
"      } \n"
"   } \n"
"} \n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:907
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:907"
msgid "== Вложенные классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:922
msgid ""
"[source, java]\n"
"----\n"
"class Outer { \n"
"   int field = 42; \n"
"   class Inner { \n"
"      //поле вложенного класса перекрывает поле внешнего класса \n"
"      int field = 18;\n"
"      public void show() {\n"
"           System.out.println(Outer.this.field);\n"
"           //печатает 42!\n"
"      } \n"
"   } \n"
"} \n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:924
msgid "== Локальные вложенные классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:942
msgid ""
"[source,java]\n"
"----\n"
"class Outer { \n"
"   void outerMethod() { \n"
"      //final (или effectively final) тут существенно\n"
"      final int x = 98; \n"
"      System.out.println(\"inside outerMethod\"); \n"
"      class Inner { \n"
"         void innerMethod() { \n"
"            System.out.println(\"x = \" + x); \n"
"         } \n"
"      } \n"
"      Inner y = new Inner(); \n"
"      y.innerMethod(); \n"
"   } \n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:944
msgid "== Java 15: локальные record-ы, enum-ы и интерфейсы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:953
msgid ""
"[source,java]\n"
"----\n"
"class Outer { \n"
"   void outerMethod() { \n"
"      //они не захватывают внешнее состояние\n"
"      record Foo (int a, int b) {};\n"
"      enum Bar {A, B};\n"
"      interface Baz {};"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:960
msgid ""
"      //NB:\n"
"      //static not allowed here!\n"
"      static class X {};\n"
"   } \n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:963
msgid "== Вложенные статические классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:965
msgid "По сути, ничем не отличаются от просто классов:"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:983
msgid ""
"[source,java]\n"
"----\n"
"class Outer { \n"
"   private static void outerMethod() { \n"
"     System.out.println(\"inside outerMethod\"); \n"
"   } \n"
"   static class Inner { \n"
"     public static void main(String[] args) { \n"
"        System.out.println(\"inside inner class Method\"); \n"
"        outerMethod(); \n"
"     } \n"
"   }\n"
"}\n"
". . .\n"
"Outer.Inner x = new Outer.Inner();\n"
"// в отличие от не статического: new Outer().new Inner();\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:985
msgid "== Анонимные классы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1005
msgid ""
"[source,java]\n"
"----\n"
"class Demo {\n"
"    void show() {\n"
"        System.out.println(\"superclass\");\n"
"    }\n"
"}\n"
"class Flavor1Demo {\n"
"    public static void main(String[] args){\n"
"        Demo d = new Demo() {\n"
"            void show() {\n"
"                super.show();\n"
"                System.out.println(\"subclass\");\n"
"            }\n"
"        };\n"
"        d.show();\n"
"    }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1007
msgid "== Использование анонимных классов"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1010
msgid ""
"* Чаще всего -- как реализация абстрактных классов и интерфейсов «по месту»\n"
"* Анонимный класс -- вложенный класс, поэтому до появления лямбд и ссылок на "
"методы это был единственный способ организовать коллбэк"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1020
msgid ""
"[source,java]\n"
"----\n"
". . . \n"
"button.onMouseClick(new EventListener(){\n"
"  void onClick(Event e) {\n"
"     //здесь у нас доступ ко всем внешним полям\n"
"     //и effectively final-переменным \n"
"  }\n"
"});"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1022
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:1022"
msgid "----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1024
msgid "== Object: the Cosmic Superclass"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1030
msgid ""
"* Любой класс в Java является наследником `Object`\n"
"* Писать `class Employee extends Object` не надо\n"
"* В этом классе определены важные методы\n"
"** `equals` и `hashCode`\n"
"** `toString`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1032
msgid "== `equals()` и `hashCode()`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1036
msgid ""
"* `boolean equals(Object other)` возвращает `true` т. и т. т., когда "
"внутреннее состояние совпадает\n"
"* `int hashCode()` возвращает целое значение, которое обязано совпадать для "
"объектов с одинаковым внутренним состоянием\n"
"* Это нужно для хеш-таблиц (и, пожалуй, является __протекшей абстракцией__)"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1038
msgid "== Формальный контракт `equals`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1047
msgid ""
"1. Рефлексивность: +\n"
"stem:[\\forall x \\n"
"e \\mathrm{null} (x.equals(x))]\n"
"2. Симметричность: +\n"
"stem:[\\forall x \\n"
"e \\mathrm{null} \\, \\forall y \\n"
"e \\mathrm{null} (x.equals(y) \\iff y.equals(x))]\n"
"3. Транзитивность: +\n"
"stem:[\\forall x \\n"
"e \\mathrm{null} \\, \\forall y \\n"
"e \\mathrm{null} \\, \\forall z \\n"
"e \\mathrm{null} (x.equals(y) \\& y.equals(z) \\Rightarrow x.equals(z))]\n"
"4. Консистентность: если сравниваемые объекты не изменялись, повторный вызов "
"`equals` должен возвращать одно и то же значение.\n"
"5. stem:[\\forall x \\n"
"e \\mathrm{null} (x.equals(\\mathrm{null}) = \\mathrm{false})]"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1049
msgid "== Формальный контракт `hashCode`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1056
msgid ""
"1. Консистентность: если объект не изменялся, повторный вызов `hashCode` "
"должен возвращать одно и то же значение (но не обязательно одно и то же "
"между разными запусками приложения)\n"
"2. Связь с `equals`: +\n"
"stem:[\\forall x \\forall y (x.equals(y) \\Rightarrow x.hashCode() = "
"y.hashCode())]\n"
"3. Хотя +\n"
"stem:[x.hashCode() = y.hashCode() \\Rightarrow x.equals(y)] +\n"
"и не обязательно, но желательно для большинства случаев."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1058
msgid "== Выводы"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1063
msgid ""
"1. Переопределять `equals` и `hashCode` нужно только вместе и согласованно, "
"чтобы выполнить контракт stem:[x.equals(y) \\Rightarrow x.hashCode() = "
"y.hashCode()]\n"
"2. Грамотно реализовать `equals` и `hashCode` трудно, но, к счастью, "
"самостоятельно это делать не нужно.\n"
"3. Для тестирования есть специальная библиотка "
"https://jqno.nl/equalsverifier/[EqualsVerifier].\n"
"4. Для генерации `equals` и `hashCode` можно использовать возможности IDE "
"или библиотеки https://projectlombok.org/[Lombok]."
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1065
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:1065"
msgid "== Генерация `equals` и `hashCode`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1067
msgid "image::generateequals.png[{image-50-width}]"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1069
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:1069"
msgid "== Генерация `equals` и `hashCode`"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1084
msgid ""
"[source,java]\n"
"----\n"
"public class Person {\n"
"    private String name;\n"
"    private int age;\n"
"    @Override\n"
"    public boolean equals(Object o) {\n"
"       // никогда, НИКОГДА не пишите это сами\n"
"        if (this == o) return true;\n"
"        if (o == null || getClass() != o.getClass()) return false;\n"
"        Person person = (Person) o;\n"
"        return age == person.age &&\n"
"                Objects.equals(name, person.name);\n"
"    }"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1091
msgid ""
"    @Override\n"
"    public int hashCode() {\n"
"        return Objects.hash(name, age);\n"
"    }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1093
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:1093"
msgid "== Или, если у нас Lombok"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1097
msgid ""
"[source,java]\n"
"----\n"
"import lombok.EqualsAndHashCode;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1104
msgid ""
"@EqualsAndHashCode\n"
"public class Person {\n"
"    private  int age;\n"
"    private  String name;\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1107
msgid "== Переопределение toString"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1126
msgid ""
"[source,java]\n"
"----\n"
"public class Person {\n"
"    private String name;\n"
"    private int age;\n"
"    . . .\n"
"    @Override\n"
"    public String toString() {\n"
"        return \"Person{\" +\n"
"                \"name='\" + name + '\\'' +\n"
"                \", age=\" + age +\n"
"                '}';\n"
"    }\n"
"}\n"
". . .\n"
"Person person = . . .\n"
"System.out.println(person);\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1128
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:1128"
msgid "== Или, если у нас Lombok"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1132
msgid ""
"[source,java]\n"
"----\n"
"import lombok.ToString;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1139
msgid ""
"@ToString\n"
"public class Person {\n"
"    private  int age;\n"
"    private  String name;\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1141
msgid "== Полный «обвес» класса"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1147
msgid ""
"[source,java]\n"
"----\n"
"public class Point {\n"
"  private final int x;\n"
"  private final int y;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1155
msgid ""
"  /*Подождите! Нам нужны:\n"
"   * конструктор\n"
"   * getX() и getY()\n"
"   * equals и hashCode\n"
"   * toString\n"
"   * 40 строчек кода из ничего!\n"
"   */"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1161
msgid ""
"  public double distance(Point other) {\n"
"    ...\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1164
msgctxt "./slides03/src/main/asciidoc/lecture.adoc:1164"
msgid "== Или, если у нас Lombok"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1168
msgid ""
"[source,java]\n"
"----\n"
"import lombok.Data;"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1178
msgid ""
"@Data\n"
"public class Point {\n"
"  private final int x;\n"
"  private final int y;\n"
"  public double distance(Point other) {\n"
"    ...\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1180
msgid "== Или, если у нас Java 14+"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1189
msgid ""
"[source,java]\n"
"----\n"
"record Point(int x, int y) { \n"
"  public double distance(Point other) {\n"
"    ...\n"
"  }\n"
"}\n"
"----"
msgstr ""

#: ./slides03/src/main/asciidoc/lecture.adoc:1194
msgid ""
"* `private final` поля\n"
"* конструктор\n"
"* доступ через `x()` и `y()`\n"
"* `equals`, `hashCode` и `toString`\n"
"* невозможно наследование от класса и от рекорда, но возможна реализация "
"интерфейсов"
msgstr ""
