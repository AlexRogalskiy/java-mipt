#. extracted from ./slides09/src/main/asciidoc/lecture.adoc
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 11:39+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 2.2.5\n"

#: ./slides09/src/main/asciidoc/lecture.adoc:24
msgid ""
"= Core Java: Курс лекций. Лекция 9\n"
"Иван Пономарёв, КУРС/МФТИ\n"
":revealjs_theme: black\n"
":revealjs_customtheme: white_course.css\n"
":revealjs_slideNumber:\n"
":revealjs_history:\n"
":revealjs_progress:\n"
":encoding: UTF-8\n"
":lang: ru\n"
"include::_doc_general_attributes.adoc[]\n"
":doctype: article\n"
":toclevels: 3\n"
":imagesdir: images\n"
":source-highlighter: highlightjs\n"
":highlightjsdir: highlight\n"
":icons: font\n"
":iconfont-remote!:\n"
":iconfont-name: font-awesome-4.7.0/css/font-awesome\n"
":revealjs_mouseWheel: true\n"
":revealjs_center: false\n"
":revealjs_transition: none\n"
":revealjs_width: 1600\n"
":revealjs_height: 900"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:28
msgid ""
"//== Часть 1. Введение\n"
":!figure-caption:"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:30
msgid "ponomarev@corchestra.ru"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:32
msgid "icon:twitter[size=lg] @inponomarev"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:34
msgid "== Streams"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:39
msgid ""
"* Появились в Java8, вместе с lambdas & method references.\n"
"* Обработка конечных и потенциально бесконечных наборов данных.\n"
"* Декларативный подход к обработке данных: описываем *что* хотим получить, а "
"не *как* мы это получим.\n"
"* Прозрачный параллелизм."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:41
msgid "== Преобразуем поток в поток"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:44
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:44"
msgid ""
"[cols=\"^40a,60a\"]\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:47
msgid ""
"|\n"
"`blockStream`"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:49
msgid "image::map.svg[]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:54
msgid ""
"`squashedStream`\n"
"|[source,java]\n"
"----\n"
"List<Block> blocks = ...;"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:56
msgid "Stream<Block> blocksStream = blocks.stream();"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:60
msgid ""
"Stream<SquashedBlock> squashedStream =\n"
"  blocksStream.map(Block::squash);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:63
msgid ""
"(Автор анимаций -- Тагир Валеев, движущиеся картинки см. "
"https://stackoverflow.com/questions/35150231/java-streams-lazy-vs-fusion-vs-"
"short-circuiting[здесь])\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:66
msgid "== Фильтруем"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:69
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:69"
msgid ""
"[cols=\"^40a,60a\"]\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:72
msgid ""
"|\n"
"`squashedStream`"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:74
msgid "image::filter.svg[]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:83
msgid ""
"`filteredStream`\n"
"|[source,java]\n"
"----\n"
"Stream<SquashedBlock> filteredStream =\n"
"  squashedStream.filter(block ‑> \n"
"         block.getColor() != YELLOW);\n"
"----\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:85
msgid "== Отображаем в консоль (терминальная операция)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:88
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:88"
msgid ""
"[cols=\"^40a,60a\"]\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:91
msgid ""
"|\n"
"`filteredStream`"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:93
msgid "image::display.svg[]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:100
msgid ""
"|[source,java]\n"
"----\n"
"filteredStream\n"
"  .forEach(System.out::println);\n"
"----\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:103
msgid "== Всё вместе в одну строку"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:116
msgid ""
"[cols=\"^40a,60a\"]\n"
"|===\n"
"|image::fuse.svg[]\n"
"|[source,java]\n"
"----\n"
"blocks.stream()\n"
"      .map(Block::squash)\n"
"      .filter(block ‑> \n"
"         block.getColor() != YELLOW)\n"
"      .forEach(System.out::println);\n"
"----\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:118
msgid "== Ничего не напоминает?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:120
msgid ""
"«Соединить два файла, привести их строки к lowercase, отсортировать, вывести "
"три последних строки в алфавитном порядке»"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:123
msgid ""
"[source,sh]\n"
"cat file1 file2 | tr \"[A-Z]\" \"[a-z]\" | sort | tail -3"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:125
msgid "== Зачем это нужно?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:134
msgid ""
"[cols=\"55a,45a\"]\n"
"|===\n"
"|*Java 7* | *Java 8*\n"
"|\n"
"[source,java]\n"
"----\n"
"Map<Currency, List<Transaction>>\n"
" transactionsByCurrencies = new HashMap<>();"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:162
msgid ""
"for (Transaction transaction : transactions) {\n"
" Currency currency =transaction.getCurrency();\n"
" List<Transaction> transactionsForCurrency =\n"
"   transactionsByCurrencies.get(currency);\n"
" if (transactionsForCurrency == null) {\n"
"  transactionsForCurrency = new ArrayList<>();\n"
"    transactionsByCurrencies.put(currency,\n"
"           transactionsForCurrency); \n"
" }\n"
" transactionsForCurrency.add(transaction);\n"
"}\n"
"----\n"
"| \n"
"[source,java]\n"
"----\n"
"Map<Currency, \n"
" List<Transaction>>\n"
" transactionsByCurr =\n"
"   transactions\n"
"   .stream()\n"
"   .collect(\n"
"     Collectors\n"
"     .groupingBy(\n"
"   Transaction\n"
"   ::getCurrency));\n"
"----\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:164
msgid "== Три категории методов Stream API"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:169
msgid ""
"[source,java]\n"
"----\n"
"//Создание стрима\n"
"List<String> names = menu.stream()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:174
msgid ""
"//Промежуточные операции\n"
"  .filter(d -> d.getCalories() > 300\n"
"  .map(Dish::getName)\n"
"  .limit(3)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:178
msgid ""
"//Терминальная операция\n"
"  .collect(Collectors.toList());\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:180
msgid "== Создание стрима"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:185
msgid ""
"[source,java]\n"
"----\n"
"//Пустого\n"
"Stream<Foo> stream0 = Stream.empty();"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:195
msgid ""
"//Перечислением элементов\n"
"Stream<String> stream1 = \n"
"         Stream.of(\"gently\", \"down\", \"the\", \"stream\");\n"
"//Из массива\n"
"Stream<String> stream2 =\n"
"         Arrays.stream(\"gently down the stream\".split(\" \"));\n"
"//Из коллекции\n"
"List<String> strings = ...\n"
"Stream<String> stream3 = strings.stream();"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:200
msgid ""
"//Из API\n"
"Path path = Paths.get(...);\n"
"Stream<Path> stream4 = Files.list(path);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:202
msgid "== Конкатенация стримов"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:209
msgid ""
"[source,java]\n"
"----\n"
"Stream<Foo> s1 = ...;\n"
"Stream<Foo> s2 = ...;\n"
"Stream<Foo> s = Stream.concat(s1, s2);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:211
msgid "== Порождение стримов (generate)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:218
msgid ""
"[source,java]\n"
"----\n"
"//С помощью генератора\n"
"Stream<Double> randoms =\n"
"    Stream.generate(Math::random);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:222
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:222"
msgid ""
"[.fragment]\n"
"[source,java]\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:227
msgid ""
"          //ХОТЯ ЛУЧШЕ\n"
"          DoubleStream doubles =\n"
"            ThreadLocalRandom.current().doubles()\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:229
msgid "== Порождение стримов (iterate)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:236
msgid ""
"[source,java]\n"
"----\n"
"//Итеративно\n"
"Stream<Integer> integers =\n"
"    Stream.iterate(0, x -> x + 1);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:240
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:240"
msgid ""
"[.fragment]\n"
"[source,java]\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:244
msgid ""
"          //ХОТЯ ЛУЧШЕ\n"
"          IntStream range = IntStream.range(0, 1000);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:253
msgid ""
"== Что будет в этом стриме?\n"
"[source,java]\n"
"----\n"
"    Stream.iterate(new int[]{0, 1}, \n"
"                   t -> new int[]{t[1], t[0] + t[1]})\n"
"    .mapToInt(t -> t[0]);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:264
msgid ""
"== Spliterator: самый общий способ создания стрима\n"
"[source,java]\n"
"----\n"
"public interface Spliterator<T> {\n"
"  boolean tryAdvance(Consumer<? super T> action);\n"
"  Spliterator<T> trySplit();\n"
"  long estimateSize();\n"
"  int characteristics();\n"
"}\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:269
msgid ""
"[source,java]\n"
"----\n"
"StreamSupport.stream(Spliterator<T> spliterator, boolean parallel)\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:281
msgid ""
"== Ветвление сплитераторов\n"
"[graphviz,\"split1.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 150 ];\n"
"node[shape=\"box\"]\n"
"try[shape=\"none\"; label=\"trySplit()\"]\n"
"Spliterator1 -> try ;\n"
"try -> Spliterator2;\n"
"}\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:290
msgid ""
"== Ветвление сплитераторов\n"
"[graphviz,\"split2.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 150 ];\n"
"node[shape=\"box\"]\n"
"try[shape=\"none\"; label=\"trySplit()\"]\n"
"try2[shape=\"none\"; label=\"trySplit()\"]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:296
msgid ""
"Spliterator1 -> Spliterator2 ;\n"
"Spliterator1 -> try2 -> Spliterator3;\n"
"Spliterator2 -> try -> Spliterator4;\n"
"}\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:298
msgid "== Характеристики сплитератора"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:313
msgid ""
"[cols=\"15a,85a\"]\n"
"|===\n"
"|`ORDERED` |Elements have a defined order (for example, a `List`), so the "
"`Spliterator` enforces this\n"
"order when traversing and partitioning them.\n"
"|`DISTINCT`| For each pair of elements `x` and `y`, `x.equals(y)` returns "
"`false`.\n"
"|`SORTED`| The traversed elements follow a predefined sort order.\n"
"|`SIZED`| This `Spliterator` has been created from a source with a known "
"size, so the value returned by `estimatedSize()` is precise.\n"
"|`NONNULL`| It’s guaranteed that the traversed elements won’t be null.\n"
"|`IMMUTABLE`| The source of this `Spliterator` can’t be modified. This "
"implies that no elements can be\n"
"added, removed, or modified during their traversal.\n"
"|`CONCURRENT`| The source of this `Spliterator` may be safely concurrently "
"modified by other threads\n"
"without any synchronization.\n"
"|`SUBSIZED`| Both this `Spliterator` and all further `Spliterators` "
"resulting from its split are `SIZED`.\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:316
msgid ""
"== Промежуточные итоги\n"
"* Есть много стандартных способов порождения стримов, для простых случаев не "
"надо \"изобретать велосипед\""
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:319
msgid "* Скорей всего, вам не понадобится самому реализовывать `Spliterator`."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:324
msgid ""
"* Быстродействия ради, есть \"примитивные стримы\" (три типа):\n"
"** `IntStream` (эффективнее, чем `Stream<Integer>`)\n"
"** `LongStream` (эффективнее, чем `Stream<Long>`)\n"
"** `DoubleStream` (эффективнее, чем `Stream<Double>`)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:326
msgid "== Преобразования стримов в стримы: получение «головы» и «хвоста»"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:330
msgid ""
"[source,java]\n"
"----\n"
"//методы интерфейса Stream"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:334
msgid ""
"//голова\n"
"Stream<T> limit(long maxSize)\n"
"Stream<T> takeWhile(Predicate<? super T> predicate)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:339
msgid ""
"//хвост\n"
"Stream<T> skip(long n)\n"
"Stream<T> dropWhile(Predicate<? super T> predicate)\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:341
msgid "== filter "
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:352
msgid ""
"[cols=\"^40a,60a\"]\n"
"|===\n"
"|\n"
"image::filter.svg[]\n"
"|[source,java]\n"
"----\n"
"Stream<T> filter(\n"
"   Predicate<? super T> predicate);\n"
"----\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:370
msgid ""
"== map \n"
"[cols=\"^40a,60a\"]\n"
"|===\n"
"|\n"
"image::map.svg[]\n"
"|[source,java]\n"
"----\n"
"<R> Stream<R> map(Function<? super T, \n"
"                           ? extends R> mapper);\n"
"IntStream mapToInt(\n"
"             ToIntFunction<? super T> mapper);\n"
"LongStream mapToLong(\n"
"            ToLongFunction<? super T> mapper);\n"
"DoubleStream mapToDouble(\n"
"          ToDoubleFunction<? super T> mapper);\n"
"----\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:372
msgid "== flatMap"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:381
msgid ""
"[source,java]\n"
"----\n"
"Path path = ...\n"
"Pattern separator = Pattern.compile(\"\\\\s\");\n"
"try(Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8)) {\n"
"    //НЕ ТО, что нам надо!\n"
"    //Stream<Stream<String>> streamStream = \n"
"    //                  lines.map(separator::splitAsStream);"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:386
msgid ""
"    //ТО, что нам надо!\n"
"    Stream<String> words = lines.flatMap(separator::splitAsStream);\n"
"    words.forEach(System.out::println);\n"
"}"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:393
msgid ""
"/*А также:\n"
"  flatMapToDouble\n"
"  flatMapToInt\n"
"  flatMapToLong\n"
"  */\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:396
msgid "== distinct"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:400
msgid ""
"[source,java]\n"
"----\n"
"//Внутренний Set"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:404
msgid ""
"Stream.of(1, 5, 8, 7, 8, 5, 9, 9)\n"
"    .distinct()\n"
"    .forEach(System.out::println);"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:407
msgid ""
"//Выведет 1, 5, 8, 7, 9\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:415
msgid ""
"== Что произойдёт при выполнении такого кода?\n"
"[source,java]\n"
"----\n"
"ThreadLocalRandom.current().ints(1, 10)\n"
"  .distinct()\n"
"  .forEach(System.out::println);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:418
msgid ""
"[.fragment]\n"
"Программа зависнет, когда исчерпаются все значения от 1 до 10. Можно "
"пофиксить, например, указав `limit(9)` после distinct."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:421
msgid "== sorted"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:425
msgid ""
"[source,java]\n"
"----\n"
"//Внутренний отсортированный список"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:429
msgid ""
"Stream.of(1, 5, 8, 7, 8, 5, 9, 9)\n"
"    .sorted()\n"
"    .forEach(System.out::println);"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:431
msgid "//Выведет 1, 5, 5, 7, 8, 8, 9, 9"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:434
msgid ""
"//Не имеет смысла для бесконечных стримов\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:436
msgid "== peek -- отладочный метод"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:441
msgid ""
"* Не меняет исходный стрим.\n"
"* Предназначен для «подглядывания» за промежуточным состоянием элементов. \n"
"* В качестве аргумента часто используется `System.out::println`.\n"
"* При параллельных вычислениях может быть вызван в произвольном порядке в "
"произвольном потоке выполнения."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:444
msgid ""
"[source,java]\n"
"Stream<T> peek(Consumer<? super T> action);"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:446
msgid "== Терминальные операции"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:453
msgid ""
"[source,java]\n"
"----\n"
"//Предъяви первый элемент\n"
"Optional<T> findFirst();\n"
"//Предъяви любой элемент\n"
"Optional<T> findAny();"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:461
msgid ""
"//Проверь, удовлетворяет ли условию...\n"
"//...какой-то\n"
"boolean anyMatch(Predicate<? super T> predicate);\n"
"//...все\n"
"boolean allMatch(Predicate<? super T> predicate);\n"
"//...никакой\n"
"boolean noneMatch(Predicate<? super T> predicate);"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:464
msgid ""
"//КОРОТКИЕ ЗАМЫКАНИЯ!\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:466
msgid "== forEach"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:471
msgid ""
"[source,java]\n"
"----\n"
"void forEach(Consumer<? super T> action);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:474
msgid ""
"* В случае параллельного выполнения нет гарантий последовательности\n"
"* Нет гарантий относительно того, в каком потоке будет выполнена лямбда"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:476
msgid "== reduce (with identity)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:484
msgid ""
"[cols=\"40a,60a\"]\n"
"|===\n"
"|\n"
"[graphviz, \"reduce1.png\"]\n"
"----\n"
"digraph G {\n"
"  graph [ dpi = 140 ];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:495
msgid ""
"  \"4\"[shape=\"square\"];\n"
"  \"5\"[shape=\"square\"];\n"
"  \"3\"[shape=\"square\"];\n"
"  \"9\"[shape=\"square\"];\n"
"  \"p1\"[label=\"+\"; shape=\"circle\"];\n"
"  \"p2\"[label=\"+\"; shape=\"circle\"];\n"
"  \"p3\"[label=\"+\"; shape=\"circle\"];\n"
"  \"p4\"[label=\"+\"; shape=\"circle\"];\n"
"  \"4\" -> \"p1\";\n"
"  \"0\" -> \"p1\";"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:506
msgid ""
"  \"p1\" -> \"s1\";\n"
"  \"5\" -> \"p2\";\n"
"  \"s1\" -> \"p2\";\n"
"  \"p2\" -> \"s2\";\n"
"  \"3\"-> \"p3\";\n"
"  \"s2\"->\"p3\";\n"
"  \"p3\"->\"s3\";\n"
"  \"9\"->\"p4\";\n"
"  \"s3\"->\"p4\";\n"
"  \"p4\"->\"s4\";"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:512
msgid ""
"  \"0\"[shape=\"square\"];\n"
"  \"s1\"[shape=\"square\";label=\"4\"];\n"
"  \"s2\"[shape=\"square\";label=\"9\"];\n"
"  \"s3\"[shape=\"square\";label=\"12\"];\n"
"  \"s4\"[shape=\"square\";label=\"21\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:514
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:514"
msgid "  \"0\"->\"4\"->\"5\"->\"3\"->\"9\"[style=\"invis\"]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:523
msgid ""
"  {rank = same; \"4\"; \"5\"; \"3\"; \"9\";}\n"
"  {rank = same; \"0\"; \"p1\";}\n"
"  {rank = same; \"s1\"; \"p2\";}\n"
"  {rank = same; \"s2\"; \"p3\";}\n"
"  {rank = same; \"s3\"; \"p4\";}\n"
"}\n"
"----\n"
"| "
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:533
msgid ""
"* Ассоциативная функция + \"identity value\"\n"
"* Промежуточные результаты -- immutable values\n"
"* Вопрос: назовите примеры ассоциативных операций в математике?\n"
"[source,java]\n"
"----\n"
"T reduce(T identity, \n"
"  BinaryOperator<T> accumulator);\n"
"----\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:535
msgid "== Parallel reduce"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:552
msgid ""
"[graphviz, \"reduce-par.png\"]\n"
"----\n"
"digraph G {\n"
"  graph [ dpi = 150 ];\n"
"  \"4\"[shape=\"square\"];\n"
"  \"5\"[shape=\"square\"];\n"
"  \"3\"[shape=\"square\"];\n"
"  \"9\"[shape=\"square\"];\n"
"  \"p1\"[label=\"+\"; shape=\"circle\"];\n"
"  \"p2\"[label=\"+\"; shape=\"circle\"];\n"
"  \"p3\"[label=\"+\"; shape=\"circle\"];\n"
"  \"p4\"[label=\"+\"; shape=\"circle\"];\n"
"  \"p5\"[label=\"+\"; shape=\"circle\"];\n"
"  \"4\" -> \"p1\";\n"
"  \"0\" -> \"p1\";\n"
"  \"0\" -> \"p3\";"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:565
msgid ""
"  \"p1\" -> \"s1\";\n"
"  \"5\" -> \"p2\";\n"
"  \"s1\" -> \"p2\";\n"
"  \"p2\" -> \"s2\";\n"
"  \"3\"-> \"p3\";\n"
"  //\"s2\"->\"p3\";\n"
"  \"p3\"->\"s3\";\n"
"  \"9\"->\"p4\";\n"
"  \"s3\"->\"p4\";\n"
"  \"p4\"->\"s4\";\n"
"  \"p5\"->\"s4\"[dir=back];\n"
"  \"s2\"->\"p5\";"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:567
msgid "  \"p5\"->\"s5\";"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:575
msgid ""
"  \"0\"[shape=\"square\"];\n"
"  \"s1\"[shape=\"square\";label=\"4\"];\n"
"  \"s2\"[shape=\"square\";label=\"9\"];\n"
"  \"s3\"[shape=\"square\";label=\"3\"];\n"
"  \"s4\"[shape=\"square\";label=\"12\"];\n"
"  \"s5\"[shape=\"square\";label=\"21\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:578
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:578"
msgid "  \"0\"->\"4\"->\"5\"->\"3\"->\"9\"[style=\"invis\"]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:587
msgid ""
"  {rank = same; \"4\"; \"5\"; \"3\"; \"9\";}\n"
"  {rank = same; \"0\"; \"p1\"; \"p3\"}\n"
"  {rank = same; \"s1\"; \"p2\";}\n"
"  //{rank = same; \"s2\"; \"p3\";}\n"
"  {rank = same; \"s3\"; \"p4\";}\n"
"  {rank = same; \"s2\"; \"s4\"; \"p5\";}\n"
"}\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:600
msgid ""
"== reduce без identity\n"
"[cols=\"40a,60a\"]\n"
"|===\n"
"|\n"
"[graphviz, \"reduce2.png\"]\n"
"----\n"
"digraph G {\n"
"  graph [ dpi = 140 ];\n"
"  \"4\"[shape=\"square\"];\n"
"  \"5\"[shape=\"square\"];\n"
"  \"3\"[shape=\"square\"];\n"
"  \"9\"[shape=\"square\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:614
msgid ""
"  \"p2\"[label=\"max\"; shape=\"circle\"];\n"
"  \"p3\"[label=\"max\"; shape=\"circle\"];\n"
"  \"p4\"[label=\"max\"; shape=\"circle\"];\n"
"  \"4\" -> \"s1\";\n"
"  \"5\" -> \"p2\";\n"
"  \"s1\" -> \"p2\";\n"
"  \"p2\" -> \"s2\";\n"
"  \"3\"-> \"p3\";\n"
"  \"s2\"->\"p3\";\n"
"  \"p3\"->\"s3\";\n"
"  \"9\"->\"p4\";\n"
"  \"s3\"->\"p4\";\n"
"  \"p4\"->\"s4\";"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:619
msgid ""
"  \"s1\"[shape=\"square\";label=\"4\"];\n"
"  \"s2\"[shape=\"square\";label=\"5\"];\n"
"  \"s3\"[shape=\"square\";label=\"5\"];\n"
"  \"s4\"[shape=\"square\";label=\"9\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:622
msgid "  \"4\"->\"5\"->\"3\"->\"9\"[style=\"invis\"]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:630
msgid ""
"  {rank = same; \"4\"; \"5\"; \"3\"; \"9\";}\n"
"  {rank = same; \"s1\"; \"p2\";}\n"
"  {rank = same; \"s2\"; \"p3\";}\n"
"  {rank = same; \"s3\"; \"p4\";}\n"
"}\n"
"----\n"
"| * identity не нужно, но и результата может не получиться (если стрим "
"пустой)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:635
msgid ""
"[source,java]\n"
"Optional<T> reduce(\n"
"  BinaryOperator<T> accumulator);\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:637
msgid "== Готовые редьюсы"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:645
msgid ""
"* Доступный во всех стримах:\n"
"** `count` -- в общем случае требует пересчёта всех элементов!\n"
"** `max(Comparator)`, `min(Comparator)`\n"
"* Доступные в стримах примитивов:\n"
"** `sum`\n"
"** `average`\n"
"** `summaryStatistics` -- count, sum, min и max «в одном флаконе»."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:647
msgid "== collect: самый гибкий метод сборки результатов"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:653
msgid ""
"* Типовые параметры:\n"
"** `T` -- тип элементов стрима\n"
"** `A` -- тип аккумулятора, промежуточной структуры данных, в которой всё "
"собирается\n"
"** `R` -- тип результата\n"
"* В отличие от `reduce`, работающего с иммутабельными объектами, мутирует "
"аккумулятор."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:656
msgid ""
"[source,java]\n"
"<R, A> R collect(Collector<? super T, A, R> collector);"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:658
msgid "== Интерфейс Collector<T, A, R>"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:662
msgid ""
"* `T` -- тип элементов стрима\n"
"* `A` -- тип аккумулятора, промежуточной структуры данных, в которой всё "
"собирается\n"
"* `R` -- тип результата"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:672
msgid ""
"[source,java]\n"
"----\n"
"public interface Collector<T, A, R> {\n"
"  Supplier<A> supplier();\n"
"  BiConsumer<A, T> accumulator();\n"
"  Function<A, R> finisher();\n"
"  BinaryOperator<A> combiner();\n"
"  Set<Characteristics> characteristics();\n"
"}"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:677
msgid ""
"//например:\n"
"class ToListCollector<T> implements\n"
"   Collector<T, List<T>, List<T>>\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:679
msgid "== Характеристики коллектора"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:687
msgid ""
"[cols=\"20a,80a\"]\n"
"|===\n"
"|*Characteristic* | *Meaning*\n"
"|`CONCURRENT`| Indicates that this collector is_concurrent_, meaning that "
"the result container can support the accumulator function being called "
"concurrently with the same result container from multiple threads.\n"
"|`UNORDERED`| Indicates that the collection operation does not commit to "
"preserving the encounter order of input elements.  (This might be true if "
"the result container has no intrinsic order, such as a `Set`.)\n"
"|`IDENTITY_FINISH`| Indicates that the finisher function is the identity "
"function and can be elided.  If set, it must be the case that an unchecked "
"cast from A to R will succeed.\n"
"|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:691
msgid ""
"== Промежуточные выводы\n"
"* Сделать свой коллектор непросто,\n"
"* Но сила коллекторов в том, что есть много готовых и их можно комбинировать!"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:693
msgid "== Наиболее употребимые коллекторы"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:701
msgid ""
"[source,java]\n"
"----\n"
"//java.util.stream.Collectors\n"
"Collector<T, ?, List<T>> toList()\n"
"Collector<T, ?, Set<T>> toSet()\n"
"Collector<T, ?, C extends Collection<T>> \n"
"  toCollection(Supplier<C> collectionFactory)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:706
msgid ""
"//Пример применения\n"
"Stream<Foo> myStream = ...\n"
"List<Foo> list = myStream.collect(Collectors.toList());\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:713
msgid ""
"== Собирание в мапы\n"
"[source,java]\n"
"----\n"
"Collector<T, ?, Map<K,U>> toMap(\n"
"  Function<? super T, ? extends K> keyMapper,\n"
"  Function<? super T, ? extends U> valueMapper)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:719
msgid ""
"//Пример применения\n"
"Stream<Person> people = ...\n"
"Map<Integer, Person> idToPerson = people.collect(\n"
"  Collectors.toMap(Person::getId, p->p);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:721
msgid "* Также можно указать `mergeFunction` и `mapSupplier`."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:724
msgid "== Вариации на тему сборки в коллекции"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:727
msgid ""
"* с помощью `toUnmodifiable(List|Set|Map)` можно сразу получить неизменяемую "
"коллекцию\n"
"* `toConcurrentMap` можно сразу получить потокобезопасную мапу."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:729
msgid "== Строка с разделителями"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:733
msgid ""
"[source,java]\n"
"----\n"
"static Collector<CharSequence, ?, String> joining()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:736
msgid ""
"//Пример использования\n"
"menuStream.map(Dish::getName).collect(Collectors.joining(\", \");"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:741
msgid ""
"//Не забываем про то, что это же можно сделать и без стримов:\n"
"static String join(CharSequence delimiter,\n"
"            Iterable<? extends CharSequence> elements)\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:743
msgid "== Группировки"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:749
msgid ""
"[graphviz, \"groupby.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 150 ];\n"
"node[shape=\"record\"]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:751
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:751"
msgid "map[label=\"<f0>FISH|<f1>MEAT|<f2>OTHER\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:758
msgid ""
"flist[label=\"{salmon|prawns}\"];\n"
"mlist[label=\"{pork|beef|chicken}\"];\n"
"olist[label=\"{pizza|rice|fruit|french fries}\"];\n"
"map:f0->flist;\n"
"map:f1->mlist;\n"
"map:f2->olist;"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:766
msgid ""
"}\n"
"----\n"
"[source,java]\n"
"----\n"
"Map<Dish.Type, List<Dish>> dishesByType =\n"
"  menu.stream().collect(Collectors.groupingBy(Dish::getType));\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:773
msgid ""
"== Downstream Collectors\n"
"[graphviz, \"groupbyby.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 150 ];\n"
"node[shape=\"record\"]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:775
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:775"
msgid "map[label=\"<f0>FISH|<f1>MEAT|<f2>OTHER\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:777
msgid "fmap[label=\"<f0>NORMAL|<f1>DIET\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:779
msgid "mmap[label=\"<f0>FAT|<f1>NORMAL|<f2>DIET\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:781
msgid "omap[label=\"<f0>NORMAL|<f1>DIET\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:784
msgid ""
"olist1[label=\"{pizza|french fries}\"];\n"
"olist2[label=\"{fruit|rice}\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:788
msgid ""
"map:f0->fmap;\n"
"map:f1->mmap;\n"
"map:f2->omap;"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:791
msgid ""
"fmap:f0->salmon;\n"
"fmap:f1->prawns;"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:795
msgid ""
"mmap:f0->pork;\n"
"mmap:f1->beef;\n"
"mmap:f2->chicken;"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:798
msgid ""
"omap:f0->olist1;\n"
"omap:f1->olist2;"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:801
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:801"
msgid ""
"}\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:810
msgid ""
"[source,java]\n"
"----\n"
"Map<Dish.Type, Map<Dish.CaloricLevel, List<Dish>>>\n"
"  dishesByTypeAndCaloricLevel =\n"
"    menu.stream().collect(Collectors\n"
"      .groupingBy(Dish::getType,\n"
"         Collectors.groupingBy(Dish::getCaloricLevel)));\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:812
msgid "== Но мы можем не только группировать в цепочке!"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:817
msgid ""
"[graphviz, \"groupbyandcount.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 150 ];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:819
msgid "map[shape=\"record\";label=\"<f0>FISH|<f1>MEAT|<f2>OTHER\"];"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:826
msgid ""
"flist[label=\"2\"];\n"
"mlist[label=\"3\"];\n"
"olist[label=\"4\"];\n"
"map:f0->flist;\n"
"map:f1->mlist;\n"
"map:f2->olist;"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:829
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:829"
msgid ""
"}\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:836
msgid ""
"[source,java]\n"
"----\n"
"Map<Dish.Type, Long> typesCount =\n"
"  menu.stream().collect(Collectors\n"
"    .groupingBy(Dish::getType, Collectors.counting()));\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:838
msgid "== Набор downstream collectors"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:843
msgid ""
"[source,java]\n"
"----\n"
"/*Всё это уже есть в стримах, но нам надо применить это\n"
"к \"разветвлённому\" стриму.*/ "
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:853
msgid ""
"/*\"Терминальные\"*/\n"
"counting()\n"
"summingInt(ToIntFunction<? super T> mapper)\n"
"summingLong(ToLongFunction<? super T> mapper)\n"
"summingDouble(ToDoubleFunction<? super T> mapper)\n"
"maxBy(Comparator<? super T> comparator)\n"
"minBy(Comparator<? super T> comparator)\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:862
msgid ""
"== Downstream collectors--продолжение\n"
"[source,java]\n"
"----\n"
"/*С возможностью продолжить цепочку*/\n"
"filtering(Predicate<? super T> predicate, downstream)\n"
"mapping(Function<? super T, ? extends U> mapper, downstream)\n"
"flatMapping(Function<? super T, \n"
"  ? extends Stream<? extends U>> mapper, downstream)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:867
msgid ""
"/*Адаптор*/\n"
"collectingAndThen(Collector<T,A,R> downstream, \n"
"  Function<R,RR> finisher)\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:869
msgid "== Когда может быть нужен collectingAndThen?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:881
msgid ""
"[source,java]\n"
"----\n"
"Map<Dish.Type, Dish> mostCaloricByType = \n"
"  menu.stream()\n"
"     .collect(Collectors.groupingBy(Dish::getType,\n"
"       collectingAndThen( //<-----АДАПТОР\n"
"         Collectors.maxBy(Comparator\n"
"                   .comparingInt(Dish::getCalories),\n"
"         //maxBy возвращает Optional\n"
"       Optional::get)));\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:883
msgid "== Параллельные стримы"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:887
msgid ""
"* Метод `.parallel()` включает параллелизацию обработки.\n"
"* `parallel` можно вызвать в любом месте цепочки вызовов.\n"
"* Пользоваться надо с осторожностью, понимая ограничения и применимость."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:889
msgid "== Optional: Контейнер, который содержит объект. Или не содержит."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:891
msgid "* Цитата из книги Java 8 in Action:"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:893
msgid ""
"* \"Tony Hoare, one of the giants of computer science, said in a "
"presentation at QCon London 2009: _I call it my billion-dollar mistake. It "
"was the invention of the null reference in 1965.... I couldn’t resist the "
"temptation to put in a null reference, simply because it was so easy to "
"implement._\""
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:896
msgid "== Optional<T> -- как стрим из 0 или 1 элемента"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:903
msgid ""
"[source,java]\n"
"----\n"
"//Создание\n"
"Optional.empty(); //пустой\n"
"Optional.of(x); //NPE если x == null\n"
"Optional.ofNullable(x); //пустой или с x-ом"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:910
msgid ""
"//Расчехление\n"
"o.get();\n"
"o.orElse(other);\n"
"o.orElseGet(()->calcOther());\n"
"o.orElseThrow(()->new IllegalStateException());\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:917
msgid ""
"== Optional.map \n"
"[source,java]\n"
"----\n"
"Optional<Insurance> optInsurance = Optional.ofNullable(insurance);\n"
"Optional<String> name = optInsurance.map(Insurance::getName);\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:922
msgid ""
"== Optional.flatMap\n"
"[source,java]\n"
"----\n"
"Optional<Person> person = ..."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:924
msgid "//person.map(Person::getCar) вернёт Optional<Optional<Car>>!!"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:930
msgid ""
"String insuranceName = person.flatMap(Person::getCar)\n"
"                             .flatMap(Car::getInsurance)\n"
"                             .map(Insurance::getName)\n"
"                             .orElse(\"Unknown\");\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:932
msgid "== Optional.filter"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:940
msgid ""
"[source,java]\n"
"----\n"
"String insuranceName = person.filter(p -> p.getAge() >= minAge)\n"
"                             .flatMap(Person::getCar)\n"
"                             .flatMap(Car::getInsurance)\n"
"                             .map(Insurance::getName)\n"
"                             .orElse(\"Unknown\");"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:942
msgid "----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:944
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:944"
msgid "== Правила использования Optional"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:946
msgid "«Лобовое» использование `Optional` -- хуже, чем `null`:"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:962
msgid ""
"[cols=\"50a,50a\"]\n"
"|===\n"
"|*ПЛОХО* | *НОРМАЛЬНО*\n"
"|\n"
"[source,java]\n"
"----\n"
"if (o.isPresent())\n"
"  o.get().someMethod();\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"if (o != null)\n"
"  o.someMethod();\n"
"----"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:964
msgid "|==="
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:966
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:966"
msgid "== Правила использования Optional"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:971
msgid ""
"* Переменная с типом `Optional` никогда не должна быть `null`.\n"
"* Поля с типом `Optional` бесполезны: проверка на «непустоту» этого поля не "
"лучше проверки на `null`, цена -- дополнительный объект.\n"
"* Не кладите `Optional`-ы в коллекции.\n"
"* В целом, `Optional` -- для возвращаемых значений, а не для аргументов "
"методов."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:973
msgid "== Когда стримы использовать не нужно"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:977
msgid ""
"* Стримы многим нравятся\n"
"* Иногда люди перестают думать, и случается «стримоз»\n"
"* Тагир Валеев: https://habr.com/ru/post/337350/[Используйте Stream API "
"проще (или не используйте вообще)]"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:979
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:979"
msgid "== Что не так?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:982
msgid ""
"[source,java]\n"
"collection.stream().forEach(...)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:985
msgid ""
"[.fragment]\n"
"У класса `Collection` уже есть метод `forEach`, стрим создавать не нужно."
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:987
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:987"
msgid "== Что не так?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:991
msgid ""
"[source,java]\n"
"collection.stream().collect(Collectors.toList())\n"
"collection.stream().collect(Collectors.toSet())"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:997
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*так эффективнее*/\n"
"new ArrayList<>(collection)\n"
"new HashSet<>(collection)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:999
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:999"
msgid "== Что не так?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1002
msgid ""
"[source,java]\n"
"collection.stream().max(Comparator.naturalOrder()).get()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1007
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*То же самое, с меньшим количеством мусора*/\n"
"Collections.max(collection)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1011
msgid ""
"== Что хотел сказать автор?\n"
"[source,java]\n"
"stream.sorted(comparator).findFirst()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1015
msgid ""
"[.fragment]\n"
"[source,java]\n"
"stream.min(comparator)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1017
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:1017"
msgid "== Как улучшить?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1020
msgid ""
"[source,java]\n"
"stream.collect(Collectors.counting())"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1026
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*Коллекторы counting(), maxBy(), minBy(), reducing(), mapping(), ... \n"
"нужны лишь как вторичные в каскадных операциях groupingBy*/\n"
"stream.count()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1028
msgid "== Что не так?!"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1031
msgid ""
"[source,java]\n"
"collection.stream().count()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1037
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*Без пересчёта элементов один за другим!*/\n"
"collection.size()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1042
msgid ""
"== Как улучшить?\n"
"[source,java]\n"
"listOfLists.stream().flatMap(List::stream).count()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1047
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*Число элементов каждого подсписка известно!*/\n"
"listOfLists.stream().mapToInt(List::size).sum()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1049
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:1049"
msgid "== Как улучшить?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1052
msgid ""
"[source,java]\n"
"stream.filter(condition).findFirst().isPresent()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1057
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*Зачем сам элемент, если надо лишь проверить наличие?*/\n"
"stream.anyMatch(condition)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1059
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:1059"
msgid "== Как улучшить?"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1065
msgid ""
"[source,java]\n"
"stream.filter(condition).anyMatch(x -> true)\n"
"stream.map(condition).anyMatch(b -> b)\n"
"stream.map(condition).anyMatch(Boolean::booleanValue)\n"
"stream.map(condition).anyMatch(Boolean.TRUE::equals)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1070
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*Замысловатые вариации на простую тему*/\n"
"stream.anyMatch(condition)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1073
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:1073"
msgid "== Как улучшить?!"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1076
msgid ""
"[source,java]\n"
"if(stream.filter(condition).count() > 0)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1082
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*В этом примере ещё хуже, чем в предыдущих,\n"
"т. к. обходится весь стрим целиком! А решение то же:*/\n"
"if(stream.anyMatch(condition)) "
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1084
msgctxt "./slides09/src/main/asciidoc/lecture.adoc:1084"
msgid "== Как улучшить?!"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1087
msgid ""
"[source,java]\n"
"if(stream.count() > 2)"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1092
msgid ""
"[.fragment]\n"
"[source,java]\n"
"/*Нам ведь неважно, сколько их, если их больше двух?*/\n"
"stream.limit(3).count()"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1094
msgid "== Выводы"
msgstr ""

#: ./slides09/src/main/asciidoc/lecture.adoc:1096
msgid ""
"* «Декларативный» подход к использованию стримов, «описываем _что_, а не "
"_как_» не отменяет понимания того, _как_ происходит вычисление. \n"
"* Применять стримы надо с умом, а много где их и не надо применять."
msgstr ""
