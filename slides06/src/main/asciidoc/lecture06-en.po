msgid ""
msgstr ""
"Project-Id-Version: slides 06\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 11:39+0300\n"
"PO-Revision-Date: 2022-01-07 19:51+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: en_UK\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.0.1\n"

#: slides06/src/main/asciidoc/lecture.adoc:24
msgid ""
"= Core Java: Курс лекций. Лекция 6\n"
"Иван Пономарёв, КУРС/МФТИ\n"
":revealjs_theme: black\n"
":revealjs_customtheme: white_course.css\n"
":revealjs_slideNumber:\n"
":revealjs_history:\n"
":revealjs_progress:\n"
":encoding: UTF-8\n"
":lang: ru\n"
"include::_doc_general_attributes.adoc[]\n"
":doctype: article\n"
":toclevels: 3\n"
":imagesdir: images\n"
":source-highlighter: highlightjs\n"
":highlightjsdir: highlight\n"
":icons: font\n"
":iconfont-remote!:\n"
":iconfont-name: font-awesome-4.7.0/css/font-awesome\n"
":revealjs_mouseWheel: true\n"
":revealjs_center: false\n"
":revealjs_transition: none\n"
":revealjs_width: 1600\n"
":revealjs_height: 900"
msgstr ""
"Core Java: Lecture #6\n"
"Ivan Ponomarev, Synthesized.io/MIPT\n"
":revealjs_theme: black\n"
":revealjs_customtheme: white_course.css\n"
":revealjs_slideNumber:\n"
":revealjs_history:\n"
":revealjs_progress:\n"
":encoding: UTF-8\n"
":lang: ru\n"
"include::_doc_general_attributes.adoc[]\n"
":doctype: article\n"
":toclevels: 3\n"
":imagesdir: images\n"
":source-highlighter: highlightjs\n"
":highlightjsdir: highlight\n"
":icons: font\n"
":iconfont-remote!:\n"
":iconfont-name: font-awesome-4.7.0/css/font-awesome\n"
":revealjs_mouseWheel: true\n"
":revealjs_center: false\n"
":revealjs_transition: none\n"
":revealjs_width: 1600\n"
":revealjs_height: 900"

#: slides06/src/main/asciidoc/lecture.adoc:28
msgid ""
"//== Часть 1. Введение\n"
":!figure-caption:"
msgstr ""
"//== Часть 1. Введение\n"
":!figure-caption:"

#: slides06/src/main/asciidoc/lecture.adoc:30
msgid "ponomarev@corchestra.ru"
msgstr "ponomarev@corchestra.ru"

#: slides06/src/main/asciidoc/lecture.adoc:32
msgid "icon:twitter[size=lg] @inponomarev"
msgstr "icon:twitter[size=lg] @inponomarev"

#: slides06/src/main/asciidoc/lecture.adoc:35
msgid "== До появления дженериков"
msgstr "== Before generics"

#: slides06/src/main/asciidoc/lecture.adoc:44
msgid ""
"[source,java]\n"
"----\n"
"Manager ceo = ...;\n"
"Manager cto = ...;\n"
"Employee cleaner = ...;\n"
"List managers = new ArrayList();\n"
"managers.add(ceo);\n"
"managers.add(cto);"
msgstr ""
"[source,java]\n"
"----\n"
"Manager ceo = ...;\n"
"Manager cto = ...;\n"
"Employee cleaner = ...;\n"
"List managers = new ArrayList();\n"
"managers.add(ceo);\n"
"managers.add(cto);"

#: slides06/src/main/asciidoc/lecture.adoc:47
msgid ""
"//bug!!\n"
"managers.add(cleaner);"
msgstr ""
"//bug!!\n"
"managers.add(cleaner);"

#: slides06/src/main/asciidoc/lecture.adoc:51
msgid ""
"//typecast with runtime exception -- too late!\n"
"Manager m = (Manager) managers.get(2); \n"
"----"
msgstr ""
"//typecast with runtime exception -- too late!\n"
"Manager m = (Manager) managers.get(2); \n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:54
msgid ""
"[%notitle]\n"
"== Runtime vs Compile Time Errors"
msgstr ""
"[%notitle]\n"
"== Runtime vs Compile Time Errors"

#: slides06/src/main/asciidoc/lecture.adoc:56
msgid "image::rtvscompiletime.png[]"
msgstr "image::rtvscompiletime.png[]"

#: slides06/src/main/asciidoc/lecture.adoc:58
msgid "== После появления дженериков"
msgstr "== After generics"

#: slides06/src/main/asciidoc/lecture.adoc:65
msgid ""
"[source,java]\n"
"----\n"
"Manager ceo = ...;\n"
"Manager cto = ...;\n"
"Employee cleaner = ...;\n"
"List<Manager> managers = new ArrayList<>();"
msgstr ""
"[source,java]\n"
"----\n"
"Manager ceo = ...;\n"
"Manager cto = ...;\n"
"Employee cleaner = ...;\n"
"List<Manager> managers = new ArrayList<>();"

#: slides06/src/main/asciidoc/lecture.adoc:70
msgid ""
"managers.add(ceo);\n"
"managers.add(cto);\n"
"// не скомпилируется!\n"
"// managers.add(cleaner);"
msgstr ""
"managers.add(ceo);\n"
"managers.add(cto);\n"
"// won't compile!\n"
"// managers.add(cleaner);"

#: slides06/src/main/asciidoc/lecture.adoc:74
msgid ""
"// приводить тип не нужно!\n"
"Manager m = managers.get(1); \n"
"----"
msgstr ""
"// no type casting is needed!\n"
"Manager m = managers.get(1); \n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:76
msgid "== Определяем собственный параметризованный класс"
msgstr "== Defining our own parameterized class"

#: slides06/src/main/asciidoc/lecture.adoc:93
msgid ""
"[source,java]\n"
"----\n"
"public class Pair<T> {\n"
"  private T first;\n"
"  private T second;\n"
"  public Pair() { first = null; second = null; }\n"
"  public Pair(T first, T second) { \n"
"    this.first = first; \n"
"    this.second = second; \n"
"  }\n"
"  public T getFirst() { return first; }\n"
"  public T getSecond() { return second; }\n"
"  public void setFirst(T newValue) { first = newValue; }\n"
"  public void setSecond(T newValue) { second = newValue; }\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"public class Pair<T> {\n"
"  private T first;\n"
"  private T second;\n"
"  public Pair() { first = null; second = null; }\n"
"  public Pair(T first, T second) { \n"
"    this.first = first; \n"
"    this.second = second; \n"
"  }\n"
"  public T getFirst() { return first; }\n"
"  public T getSecond() { return second; }\n"
"  public void setFirst(T newValue) { first = newValue; }\n"
"  public void setSecond(T newValue) { second = newValue; }\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:95
msgid "== Определение и использование"
msgstr "== Definition and use"

#: slides06/src/main/asciidoc/lecture.adoc:99
msgid ""
"[source,java]\n"
"----\n"
"Pair<String> pair = new Pair<>(\"Ваня\", \"Маша\");"
msgstr ""
"[source,java]\n"
"----\n"
"Pair<String> pair = new Pair<>(\"John\", \"Mary\");"

#: slides06/src/main/asciidoc/lecture.adoc:106
msgid ""
"//ЧТО ЭКВИВАЛЕНТНО ЗАМЕНЕ T НА String\n"
"Pair(String, String)\n"
"String getFirst()\n"
"String getSecond()\n"
"void setFirst(String)\n"
"void setSecond(String)"
msgstr ""
"//Which is equivalent to replacing T with String\n"
"Pair(String, String)\n"
"String getFirst()\n"
"String getSecond()\n"
"void setFirst(String)\n"
"void setSecond(String)"

#: slides06/src/main/asciidoc/lecture.adoc:108
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:108"
msgid "----"
msgstr "----"

#: slides06/src/main/asciidoc/lecture.adoc:110
msgid "== Generic methods"
msgstr "== Generic methods"

#: slides06/src/main/asciidoc/lecture.adoc:116
msgid ""
"[source,java]\n"
"----\n"
"public <T> T getRandomItem(T... items) {\n"
"  return items[ThreadLocalRandom.current().nextInt(items.length)];\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"public <T> T getRandomItem(T... items) {\n"
"  return items[ThreadLocalRandom.current().nextInt(items.length)];\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:120
msgid ""
"String s = getRandomItem(\"A\", \"B\", \"C\");\n"
"Manager m = getRandomItem(ceo, cto, cfo);\n"
"----"
msgstr ""
"String s = getRandomItem(\"A\", \"B\", \"C\");\n"
"Manager m = getRandomItem(ceo, cto, cfo);\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:122
msgid "== Другой пример"
msgstr "== Another example"

#: slides06/src/main/asciidoc/lecture.adoc:132
msgid ""
"[source,java]\n"
"----\n"
"public <T> T getRandomItem(List<T> items) {\n"
"  T result = \n"
"    items.get(\n"
"      ThreadLocalRandom.current().nextInt(items.size()));\n"
"  return result;\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"public <T> T getRandomItem(List<T> items) {\n"
"  T result = \n"
"    items.get(\n"
"      ThreadLocalRandom.current().nextInt(items.size()));\n"
"  return result;\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:134
msgid "== Промежуточные выводы"
msgstr "== Intermediate conclusions"

#: slides06/src/main/asciidoc/lecture.adoc:138
msgid ""
"* Использование параметризованных классов -- простое (просто укажите "
"параметры, `List<Manager>`)\n"
"* Использование параметризованных методов -- ещё проще: type inference: "
"`Manager m = getRandomItem(...);`\n"
"* Написание собственных параметризованных классов и методов -- задачка более "
"сложная."
msgstr ""
"* Using parameterized classes is simple (just specify parameters, "
"<Manager>`List`)\n"
"* Using parameterized methods is even simpler: type inference: `Manager m = "
"getRandomItem(...); `\n"
"* Writing your own parameterized classes and methods is a more complex task."

#: slides06/src/main/asciidoc/lecture.adoc:140
msgid "== Bounded types"
msgstr "== Bounded types"

#: slides06/src/main/asciidoc/lecture.adoc:146
msgid ""
"[source,java]\n"
"----\n"
"public <T extends Person> String getRandomPersonName(List<T> items) {\n"
"  Person result = //можно написать и T result = \n"
"    items.get(ThreadLocalRandom.current().nextInt(items.size()));"
msgstr ""
"[source,java]\n"
"----\n"
"public <T extends Person> String getRandomPersonName(List<T> items) {\n"
"  Person result = //you can write T result = … as well\n"
"    items.get(ThreadLocalRandom.current().nextInt(items.size()));"

#: slides06/src/main/asciidoc/lecture.adoc:150
msgid ""
"  return result.getName();\n"
"}\n"
"----"
msgstr ""
"  return result.getName();\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:152
msgid "== Intersection types"
msgstr "== Intersection types"

#: slides06/src/main/asciidoc/lecture.adoc:157
msgid ""
"[plantuml, intersections, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 150 "
msgstr ""
"[plantuml, intersections, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:160
msgid ""
"class Employee {\n"
"}"
msgstr ""
"class Employee {\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:163
msgid ""
"class Retiree {\n"
"}"
msgstr ""
"class Retiree {\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:167
msgid ""
"class Person {\n"
"  + getName(): String\n"
"}"
msgstr ""
"class Person {\n"
"  + getName(): String\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:171
msgid ""
"interface Payable {\n"
"  + getMonthPayment: BigDecimal\n"
"}"
msgstr ""
"interface Payable {\n"
"  + getMonthPayment: BigDecimal\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:180
msgid ""
"Payable <|.. Employee\n"
"Payable <|.. Retiree\n"
"Person <|-- Employee \n"
"Person <|-- Retiree\n"
"Person <|-- Visitor\n"
"@enduml\n"
"----"
msgstr ""
"Payable <|.. Employee\n"
"Payable <|.. Retiree\n"
"Person <|-- Employee \n"
"Person <|-- Retiree\n"
"Person <|-- Visitor\n"
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:195
msgid ""
"[source,java]\n"
"----\n"
"//через амперсанд сколько угодно интерфейсов, \n"
"//но не более одного класса\n"
"public <T extends Person & Payable> \n"
"  String getRandomNameAndPayment(List<T> items) {\n"
"  T result =\n"
"    items.get(\n"
"        ThreadLocalRandom.current().nextInt(items.size()));\n"
"    return result.getName() //из Person! \n"
"         + result.getPayment(); //из Payable!\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"//you can add with ampersand as many interfaces as you like, \n"
"//but not more than one class\n"
"public <T extends Person & Payable> \n"
"  String getRandomNameAndPayment(List<T> items) {\n"
"  T result =\n"
"    items.get(\n"
"        ThreadLocalRandom.current().nextInt(items.size()));\n"
"    return result.getName() //from Person! \n"
"         + result.getPayment(); //from Payable!\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:201
msgid ""
"== Реализация дженериков\n"
"* Появились в Java 5\n"
"* Стояла задача обратной совместимости\n"
"* Generics -- возможность языка, а не платформы\n"
"* Type Erasure, будь он неладен!"
msgstr ""
"== Implementation of generics\n"
"* Appeared in Java 5\n"
"* There was a problem of backward compatibility\n"
"* Generic classes is a language capability, not a platform capability\n"
"* Type Erasure, damn it!"

#: slides06/src/main/asciidoc/lecture.adoc:203
msgid "== Сырые типы"
msgstr "== Raw types"

#: slides06/src/main/asciidoc/lecture.adoc:249
msgid ""
"[cols=\"45a,55a\"]\n"
"|===\n"
"^|*Generic Type (source)*\n"
"^|*Raw Type (compiled)*\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair<T> {\n"
"  private T first;\n"
"  private T second;\n"
"  Pair(T first, \n"
"       T second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  T getFirst() \n"
"   {return first; }\n"
"  T getSecond() \n"
"   {return second; }\n"
"  void setFirst(T newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(T newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair {\n"
"  private Object first;\n"
"  private Object second;\n"
"  Pair(Object first, \n"
"       Object second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  Object getFirst() \n"
"   {return first; }\n"
"  Object getSecond() \n"
"   {return second; }\n"
"  void setFirst(Object newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(Object newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|==="
msgstr ""
"[cols=\"45a,55a\"]\n"
"|===\n"
"^|*Generic Type (source)*\n"
"^|*Raw Type (compiled)*\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair<T> {\n"
"  private T first;\n"
"  private T second;\n"
"  Pair(T first, \n"
"       T second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  T getFirst() \n"
"   {return first; }\n"
"  T getSecond() \n"
"   {return second; }\n"
"  void setFirst(T newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(T newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair {\n"
"  private Object first;\n"
"  private Object second;\n"
"  Pair(Object first, \n"
"       Object second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  Object getFirst() \n"
"   {return first; }\n"
"  Object getSecond() \n"
"   {return second; }\n"
"  void setFirst(Object newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(Object newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|==="

#: slides06/src/main/asciidoc/lecture.adoc:252
msgid "== Ограниченные типы вместо Object"
msgstr "== Restricted types instead of Object"

#: slides06/src/main/asciidoc/lecture.adoc:298
msgid ""
"[cols=\"45a,55a\"]\n"
"|===\n"
"^|*Generic Type (source)*\n"
"^|*Raw Type (compiled)*\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair<T extends Employee>{\n"
"  private T first;\n"
"  private T second;\n"
"  Pair(T first, \n"
"       T second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  T getFirst() \n"
"   {return first; }\n"
"  T getSecond() \n"
"   {return second; }\n"
"  void setFirst(T newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(T newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair {\n"
"  private Employee first;\n"
"  private Employee second;\n"
"  Pair(Employee first, \n"
"       Employee second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  Employee getFirst() \n"
"   {return first; }\n"
"  Employee getSecond() \n"
"   {return second; }\n"
"  void setFirst(Employee newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(Employee newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|==="
msgstr ""
"[cols=\"45a,55a\"]\n"
"|===\n"
"^|*Generic Type (source)*\n"
"^|*Raw Type (compiled)*\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair<T extends Employee>{\n"
"  private T first;\n"
"  private T second;\n"
"  Pair(T first, \n"
"       T second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  T getFirst() \n"
"   {return first; }\n"
"  T getSecond() \n"
"   {return second; }\n"
"  void setFirst(T newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(T newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class Pair {\n"
"  private Employee first;\n"
"  private Employee second;\n"
"  Pair(Employee first, \n"
"       Employee second)\n"
"   {this.first = first; \n"
"    this.second = second;}\n"
"  Employee getFirst() \n"
"   {return first; }\n"
"  Employee getSecond() \n"
"   {return second; }\n"
"  void setFirst(Employee newValue)\n"
"   {first = newValue;}\n"
"  void setSecond(Employee newValue)\n"
"   {second = newValue;}\n"
"}\n"
"----\n"
"|==="

#: slides06/src/main/asciidoc/lecture.adoc:300
msgid "== Вызовы методов"
msgstr "== Method calls"

#: slides06/src/main/asciidoc/lecture.adoc:311
msgid ""
"[cols=\"50a,50a\"]\n"
"|===\n"
"^|*Source code*\n"
"^|*Compiled*\n"
"|\n"
"[source,java]\n"
"----\n"
"Pair<Manager> buddies = \n"
"  new Pair<>();"
msgstr ""
"[cols=\"50a,50a\"]\n"
"|===\n"
"^|*Source code*\n"
"^|*Compiled*\n"
"|\n"
"[source,java]\n"
"----\n"
"Pair<Manager> buddies = \n"
"  new Pair<>();"

#: slides06/src/main/asciidoc/lecture.adoc:316
msgid ""
"/*контроль типов --\n"
"на этапе компиляции*/\n"
"buddies.setFirst(cfo);\n"
"buddies.setSecond(cto);"
msgstr ""
"/*type control\n"
"in compile time*/\n"
"buddies.setFirst(cfo);\n"
"buddies.setSecond(cto);"

#: slides06/src/main/asciidoc/lecture.adoc:326
msgid ""
"/*type cast не нужен*/\n"
"Manager buddy = \n"
"  buddies.getFirst();\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"Pair buddies = \n"
"  new Pair();"
msgstr ""
"/*type cast is not needed*/\n"
"Manager buddy = \n"
"  buddies.getFirst();\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"Pair buddies = \n"
"  new Pair();"

#: slides06/src/main/asciidoc/lecture.adoc:331
msgid ""
"/*контроль типов не нужен --\n"
"на этапе компиляции проверили!*/\n"
"buddies.setFirst(cfo);\n"
"buddies.setSecond(cto);"
msgstr ""
"/*type control is not needed --\n"
"everything was checked at compile time!*/\n"
"buddies.setFirst(cfo);\n"
"buddies.setSecond(cto);"

#: slides06/src/main/asciidoc/lecture.adoc:337
msgid ""
"/*type cast вставлен компилятором*/\n"
"Manager buddy = \n"
"  (Manager) buddies.getFirst();\n"
"----\n"
"|==="
msgstr ""
"/*type cast inserted by compiler*/\n"
"Manager buddy = \n"
"  (Manager) buddies.getFirst();\n"
"----\n"
"|==="

#: slides06/src/main/asciidoc/lecture.adoc:339
msgid "== Bridge methods для сохранения полиморфизма"
msgstr "== Bridge methods to preserve polymorphism"

#: slides06/src/main/asciidoc/lecture.adoc:349
msgid ""
"[cols=\"50a,50a\"]\n"
"|===\n"
"^|*Source code*\n"
"^|*Compiled*\n"
"|\n"
"[source,java]\n"
"----\n"
"class DateInterval extends \n"
" Pair<LocalDate> {"
msgstr ""
"[cols=\"50a,50a\"]\n"
"|===\n"
"^|*Source code*\n"
"^|*Compiled*\n"
"|\n"
"[source,java]\n"
"----\n"
"class DateInterval extends \n"
" Pair<LocalDate> {"

#: slides06/src/main/asciidoc/lecture.adoc:364
msgid ""
" @Override\n"
" void setSecond(\n"
"        LocalDate second){\n"
"  if (second\n"
"   .compareTo(getFirst())>=0){\n"
"      super.setSecond(second);\n"
"  }\n"
" }\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class DateInterval extends Pair {"
msgstr ""
" @Override\n"
" void setSecond(\n"
"        LocalDate second){\n"
"  if (second\n"
"   .compareTo(getFirst())>=0){\n"
"      super.setSecond(second);\n"
"  }\n"
" }\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class DateInterval extends Pair {"

#: slides06/src/main/asciidoc/lecture.adoc:372
msgid ""
" void setSecond(\n"
"        LocalDate second){\n"
"  if (second\n"
"   .compareTo(getFirst())>=0){\n"
"      super.setSecond(second);\n"
"  }\n"
" }"
msgstr ""
" void setSecond(\n"
"        LocalDate second){\n"
"  if (second\n"
"   .compareTo(getFirst())>=0){\n"
"      super.setSecond(second);\n"
"  }\n"
" }"

#: slides06/src/main/asciidoc/lecture.adoc:381
msgid ""
" //bridge method!!\n"
" @Override\n"
" void setSecond(Object second){\n"
"   setSecond((LocalDate) second);\n"
" }\n"
"}\n"
"----\n"
"|==="
msgstr ""
" //bridge method!!\n"
" @Override\n"
" void setSecond(Object second){\n"
"   setSecond((LocalDate) second);\n"
" }\n"
"}\n"
"----\n"
"|==="

#: slides06/src/main/asciidoc/lecture.adoc:387
msgid ""
"== Итог: как это работает\n"
"* Параметризованных классов в JVM нет, только обычные классы и методы.\n"
"* Типовые параметры заменяются на Object или на свою границу.\n"
"* Для сохранения полиморфизма добавляются связывающие методы (bridge "
"methods).\n"
"* Сведение типов добавляется по мере необходимости."
msgstr ""
"== Summary: how it works\n"
"* There are no parameterized classes in the JVM, only regular classes and "
"methods.\n"
"* Type parameters are replaced with Object or with boundary type.\n"
"* Bridge methods are added to preserve polymorphism.\n"
"* Type cast is added as needed."

#: slides06/src/main/asciidoc/lecture.adoc:389
msgid "== Никогда не употребляйте сырые типы"
msgstr "== Never use raw types"

#: slides06/src/main/asciidoc/lecture.adoc:392
msgid ""
"* Возможность назначать переменным сырые типы оставлена для обратной "
"совместимости с кодом, написанным до Java5.\n"
"* Java5 вышла в 2004 году."
msgstr ""
"* The ability to use raw types as variable types is reserved for backward "
"compatibility with code written before Java5.\n"
"* Java5 was released in 2004."

#: slides06/src/main/asciidoc/lecture.adoc:405
msgid ""
"[source,java]\n"
"----\n"
"List<Manager> a = new ArrayList<>();\n"
"//Употребили сырой тип.\n"
"List b = a;\n"
"//Компилируется и выполняется, список испорчен!\n"
"b.add(\"manager\");\n"
"//Выполняется: list.get вернул String как Object\n"
"System.out.println(b.get(0));\n"
"//ClassCastException при выполнении\n"
"Manager m = a.get(0);\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"List<Manager> a = new ArrayList <> ();\n"
"//Raw type usage.\n"
"List b = a;\n"
"//Compiled and executed, the list is corrupted!\n"
"b.add(\"manager\");\n"
"//Executed: list.get returned String as Object\n"
"System.out.println(b.get(0));\n"
"//ClassCastException on execution\n"
"Manager m = a.get(0);\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:408
msgid ""
"[%notitle]\n"
"== Понимание дженериков в Джаве"
msgstr ""
"[%notitle]\n"
"== Understanding generics in Java"

#: slides06/src/main/asciidoc/lecture.adoc:410
msgid ""
"_Понимание дженериков в Джаве -- это не про то, что с ними делать можно, а "
"про то, что с ними делать нельзя._"
msgstr ""
"_Understanding generics in Java is not about what you can do with them, but "
"about what you can't do with them._"

#: slides06/src/main/asciidoc/lecture.adoc:413
msgid "== Стирание типов -> невозможность определить параметр типа в Runtime"
msgstr "== Type Erase -> unable to determine a type parameter in the runtime"

#: slides06/src/main/asciidoc/lecture.adoc:417
msgid ""
"[plantuml, rawtype, png]\n"
"----\n"
"@startuml"
msgstr ""
"[plantuml, rawtype, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:419
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:419"
msgid "skinparam dpi 150 "
msgstr "skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:425
msgid ""
"class Pair {\n"
"(raw type)\n"
"---\n"
"}"
msgstr ""
"class Pair {\n"
"(raw type)\n"
"---\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:427
msgid "class \"Pair<String>\" {"
msgstr "class \"Pair<String>\" {"

#: slides06/src/main/asciidoc/lecture.adoc:429
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:429"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:431
msgid "class \"Pair<Manager>\" {"
msgstr "class \"Pair<Manager>\" {"

#: slides06/src/main/asciidoc/lecture.adoc:433
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:433"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:437
msgid "Pair <|-- \"Pair<String>\""
msgstr "Pair <|-- \"Pair<String>\""

#: slides06/src/main/asciidoc/lecture.adoc:439
msgid "Pair <|-- \"Pair<Manager>\""
msgstr "Pair <|-- \"Pair<Manager>\""

#: slides06/src/main/asciidoc/lecture.adoc:442
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:442"
msgid ""
"@enduml\n"
"----"
msgstr ""
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:447
msgid ""
"[source,java]\n"
"----\n"
"//ошибка компиляции! не знаем мы в рантайме параметр типа!\n"
"if (a instanceof Pair<String>) ..."
msgstr ""
"[source,java]\n"
"----\n"
"//compilation error! we don't know the type parameter in the runtime!\n"
"if (a instanceof Pair<String>) ..."

#: slides06/src/main/asciidoc/lecture.adoc:451
msgid ""
"//вот так -- получится...\n"
"if (a instanceof Pair<?>) ...\n"
"----"
msgstr ""
"//that's how it goes...\n"
"if (a instanceof Pair<?>) ...\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:453
msgid ""
"== Стирание типов до Object -> невозможность использовать примитивные типы в "
"качестве параметров"
msgstr ""
"== Erasing types to Object -> not being able to use primitive types as "
"parameters"

#: slides06/src/main/asciidoc/lecture.adoc:458
msgid ""
"[source,java]\n"
"----\n"
"//увы, невозможно!\n"
"List<int>  integers = ... //ошибка компиляции!"
msgstr ""
"[source,java]\n"
"----\n"
"//alas, impossible!\n"
"List<int>  integers = ... //compilation error!"

#: slides06/src/main/asciidoc/lecture.adoc:465
msgid ""
"List<Integer> integers = ...\n"
"integers.add(42); /*под капотом будет autoboxing:\n"
"integers.add(Integer.valueOf(42);*/\n"
"int v = integers.get(0); /*под капотом будет\n"
"unboxing: v = integers.get(0).intValue();*/\n"
"----"
msgstr ""
"List<Integer> integers = ...\n"
"integers.add(42); /*autoboxing under the hood:\n"
"integers.add(Integer.valueOf(42);*/\n"
"int v = integers.get(0); /*unboxing under the hood:\n"
"v = integers.get(0).intValue();*/\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:467
msgid "== Примитивы и дженерики"
msgstr "== Generics and primitives"

#: slides06/src/main/asciidoc/lecture.adoc:476
msgid ""
"* День сегодняшний: нужна производительность? -- пишем специальные "
"реализации.\n"
"** В стандартной библиотеке:  \n"
"*** `Stream<Integer>` -> `IntStream`\n"
"*** `Stream<Double>` -> `DoubleStream`.\n"
"** В специализированных библиотеках вроде http://fastutil.di.unimi.it/"
"[fastutil]: \n"
"*** `ArrayList<Integer>` -> `IntArrayList`,\n"
"*** `HashMap<Integer, V>` -> `Int2ObjectMap<V>` (ВНИМАНИЕ: реальная "
"потребность в таких библиотеках возникает редко!!) \n"
"* День завтрашний: Project Valhalla,  specialized generics. Решит проблему "
"раз и навсегда."
msgstr ""
"* Today: Need performance? -- we write special implementations.\n"
"** In the Standard Library:  \n"
"`Stream<Integer>` -> `IntStream`\n"
"`Stream<Double>` -> `DoubleStream`.\n"
"** In specialized libraries like http://fastutil.di.unimi.it/[fastutil]: \n"
"`ArrayList<Integer>` -> `IntArrayList`,\n"
"`HashMap<Integer, V>`-> `Int2ObjectMap<V>` (WARNING: the real need for such "
"libraries is rare!!) \n"
"* Tomorrow: Project Valhalla, specialized generics. Will solve the problem "
"once and for all."

#: slides06/src/main/asciidoc/lecture.adoc:478
msgid "== Нельзя инстанцировать типы-параметры"
msgstr "== Parameter types cannot be instantiated"

#: slides06/src/main/asciidoc/lecture.adoc:481
msgid ""
"[source,java]\n"
"----"
msgstr ""
"[source,java]\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:483
msgid "class Pair<T> {"
msgstr "class Pair<T> {"

#: slides06/src/main/asciidoc/lecture.adoc:489
msgid ""
"    T newValue {\n"
"      return new T(); //увы, ошибка компиляции!\n"
"    }\n"
"}\n"
"----"
msgstr ""
"    T newValue {\n"
"      return new T(); //увы, ошибка компиляции!\n"
"    }\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:491
msgid "== Решается с помощью метакласса и рефлексии (о которой речь впереди)"
msgstr ""
"== Solved by metaclass and reflection (which we will talk about it later)"

#: slides06/src/main/asciidoc/lecture.adoc:497
msgid ""
"[source,java]\n"
"----\n"
"class Container<T> {\n"
"  //bounded wildcard type, речь впереди\n"
"  Class<? extends T> clazz;"
msgstr ""
"[source,java]\n"
"----\n"
"class Container<T> {\n"
"//  bounded wildcard type, to be explained later\n"
"  Class <? extends T> clazz;"

#: slides06/src/main/asciidoc/lecture.adoc:501
msgid ""
"  Container(Class<? extends T> clazz) {\n"
"    this.clazz = clazz;\n"
"  }"
msgstr ""
"  Container(Class<? extends T> clazz) {\n"
"    this.clazz = clazz;\n"
"  }"

#: slides06/src/main/asciidoc/lecture.adoc:507
msgid ""
"  T newInstance() throws ReflectiveOperationException {\n"
"   //если нашёлся открытый конструктор без параметров!\n"
"    return clazz.newInstance();\n"
"  }\n"
"}"
msgstr ""
"  T newInstance() throws ReflectiveOperationException {\n"
"   //if there is an accessible constructor without parameters!\n"
"    return clazz.newInstance();\n"
"  }\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:510
msgid ""
"Container<Employee> container1 = new Container<>(Employee.class);\n"
"----"
msgstr ""
"Container<Employee> container1 = new Container<>(Employee.class);\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:512
msgid "== Тем более нельзя инстанцировать массив типа-параметра"
msgstr "== Moreover, you cannot instantiate a type-parameter array"

#: slides06/src/main/asciidoc/lecture.adoc:520
msgid ""
"[source,java]\n"
"----\n"
"public T[] toArray(){\n"
"    //Не скомпилируется\n"
"    return new T[size];\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"public T[] toArray(){\n"
"    //Won't compile\n"
"    return new T[size];\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:522
msgid "Решается передачей параметра, например, в ArrayList:"
msgstr "It is solved by passing a parameter, for example, to ArrayList:"

#: slides06/src/main/asciidoc/lecture.adoc:529
msgid ""
"[source,java]\n"
"----\n"
"/* Если массив достаточных размеров -- используе м его,\n"
"если недостаточных -- конструируем новый через рефлексию*/\n"
"public <T> T[] toArray(T[] a)\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"/* If the array is of sufficient size - use it,\n"
"if it's too small - we construct a new one via reflection*/\n"
"public <T> T[] toArray(T[] a)\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:531
msgid "== Массивы и дженерики -- лютые враги"
msgstr "== Arrays and generics are enemies"

#: slides06/src/main/asciidoc/lecture.adoc:539
msgid ""
"[source,java]\n"
"----\n"
"//Не скомпилируется: Generic Array Creation.\n"
"List<String>[] a = new ArrayList<String>[10];\n"
"//...ведь такой массив не будет иметь \n"
"//полную информацию о своих элементах!\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"//Won't compile: Generic Array Creation.\n"
"List<String>[] a = new ArrayList<String>[10];\n"
"//...because such an array will not have\n"
"//the full type information about its elements!\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:545
msgid ""
"== Забьём значения кувалдой и устроим heap pollution\n"
"[source,java]\n"
"----\n"
"List<String>[] a = (List<String>[])new List<?>[10];\n"
"Object[] objArray = a;"
msgstr ""
"== Hammer the values into an array with a sledgehammer and make a heap "
"pollution\n"
"[source,java]\n"
"----\n"
"List<String>[] a = (List<String>[])new List <?> [10];\n"
"Object[] objArray = a;"

#: slides06/src/main/asciidoc/lecture.adoc:550
msgid ""
"objArray[0] = (List<String>) Arrays.asList(\"foo\");\n"
"//a[1] не пропустит в compile-time\n"
"//но objArray[1] пропустит и в compile-time, и в run-time\n"
"objArray[1] = (List<Manager>) Arrays.asList(new Manager());"
msgstr ""
"objArray[0] = (List<String>) Arrays.asList(\"foo\");\n"
"//a[1] won't do in compile time\n"
"//but objArray[1] will do both in compile time and run time\n"
"objArray[1] = (List<Manager>) Arrays.asList(new Manager());"

#: slides06/src/main/asciidoc/lecture.adoc:556
msgid ""
"//Runtime error: Manager cannot be cast to String\n"
"String s = a[1].get(0);\n"
"//...это и называется heap pollution.\n"
"----"
msgstr ""
"//Runtime error: Manager cannot be cast to String\n"
"String s = a[1].get(0);\n"
"//...and this is what is called heap pollution.\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:558
msgid "== Varargs -- всё равно массив..."
msgstr "== Varargs -- still an array..."

#: slides06/src/main/asciidoc/lecture.adoc:569
msgid ""
"Тот же heap pollution, что и в прошлом примере:\n"
"[source,java]\n"
"----\n"
"static void dangerous(List<String>... stringLists){\n"
"  List<Integer> intList = List.of(42);\n"
"  Object[] objects = stringLists;\n"
"  objects[0] = intList;\n"
"  //ClassCastException\n"
"  String s = stringLists[0].get(0);\n"
"}"
msgstr ""
"The same heap pollution as in the previous example:\n"
"[source,java]\n"
"----\n"
"static void dangerous(List<String>... stringLists){\n"
"  List<Integer> intList = List.of(42);\n"
"  Object[] objects = stringLists;\n"
"  objects[0] = intList;\n"
"  ClassCastException\n"
"  String s = stringLists[0].get(0);\n"
"}</Integer></String>"

#: slides06/src/main/asciidoc/lecture.adoc:572
msgid ""
"dangerous(new ArrayList<>());\n"
"----"
msgstr ""
"dangerous(new ArrayList<>());\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:574
msgid "== Компилятор что-то предчувствует..."
msgstr "== The compiler anticipates something..."

#: slides06/src/main/asciidoc/lecture.adoc:576
msgid "image::varargswarning.png[{image-100-width}]"
msgstr "image::varargswarning.png[{image-100-width}]"

#: slides06/src/main/asciidoc/lecture.adoc:585
msgid ""
"Чтобы успокоить компилятор, надо поставить аннотацию `@SafeVarargs`:\n"
"[source,java]\n"
"----\n"
"/*Я даю честное слово, что не буду \n"
"устраивать heap pollution!*/\n"
"@SafeVarargs\n"
"static void dangerous(List<String>... \n"
"----"
msgstr ""
"To calm the compiler down, you need to put the annotation `@SafeVarargs`:\n"
"[source,java]\n"
"----\n"
"/*I solemnly promise I will not \n"
"do heap pollution!*/\n"
"@SafeVarargs\n"
"static void dangerous(List<String>... \n"
"----</String>"

#: slides06/src/main/asciidoc/lecture.adoc:587
msgid "...и компилятор успокоится."
msgstr "...and the compiler will calm down."

#: slides06/src/main/asciidoc/lecture.adoc:589
msgid "== Зачем?!"
msgstr "== Why?!"

#: slides06/src/main/asciidoc/lecture.adoc:597
msgid ""
"* Всё потому, что иметь varargs с параметризованными типами удобно!..\n"
"** `Arrays.asList(T... a)`\n"
"** `Collections.addAll(Collection<? super T> c, T... elements)`\n"
"** `EnumSet.of(E first, E... rest)`\n"
"* Если вести себя хорошо, можно ставить @SafeVarargs, и всё будет хорошо:\n"
"** Не записывать ничего в элементы массива,\n"
"** Не раздавать ссылку на массив параметров наружу."
msgstr ""
"* That's because having varargs with parameterized types is convenient!..\n"
"** `Arrays.asList(T... a)`\n"
"** `Collections.addAll(Collection<? super T> c, T... elements)`\n"
"** `EnumSet.of(E first, E... rest)`\n"
"* If you behave well, you can use `@SafeVarargs`, and everything will be "
"fine:\n"
"** Do not write anything to the elements of the array,\n"
"** Do not pass a reference to the array of parameters to the outside methods."

#: slides06/src/main/asciidoc/lecture.adoc:599
msgid "== Нельзя параметризовать"
msgstr "== You cannot parameterize"

#: slides06/src/main/asciidoc/lecture.adoc:606
msgid ""
"* Исключения\n"
"** ловля исключений -- это проверка их типов,\n"
"** дальше сырых типов мы в рантайме проверить не можем.\n"
"* Анонимные классы \n"
"** Инстанцируется по месту, не может быть несколько классов, "
"параметризованных по-разному.\n"
"* Enum-ы."
msgstr ""
"* Exceptions\n"
"** catching exceptions is checking their types,\n"
"** raw types is everything we can check in the runtime.\n"
"* Anonymous classes \n"
"** Instantiated in place, there cannot be multiple classes parameterized "
"differently.\n"
"* Enums."

#: slides06/src/main/asciidoc/lecture.adoc:608
msgid "== Параметры типов нельзя использовать в статическом контексте"
msgstr "== Type parameters cannot be used in a static context"

#: slides06/src/main/asciidoc/lecture.adoc:615
msgid ""
"[source,java]\n"
"----\n"
"public class Container<T> {\n"
"    private static T value; //не скомпилируется.\n"
"    public static T getValue(); //не скомпилируется\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"public class Container<T> {\n"
"    private static T value; //will not compile.\n"
"    public static T getValue(); //will not compile\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:620
msgid ""
"//Статический контекст ОДИН НА ВСЕХ\n"
"Container<Foo>.getValue();\n"
"Container<Bar>.getValue();\n"
"----"
msgstr ""
"//Static context is one for all\n"
"Container<Foo>.getValue();\n"
"Container<Bar>.getValue();\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:622
msgid ""
"== Нельзя реализовывать разные параметризации одного и того же интерфейса"
msgstr ""
"== You cannot implement different parameterizations of the same interface in "
"one class"

#: slides06/src/main/asciidoc/lecture.adoc:653
msgid ""
"[cols=\"50a,50a\"]\n"
"|===\n"
"^|*Source code*\n"
"^|*Compiled*\n"
"|\n"
"[source,java]\n"
"----\n"
"class Employee implements\n"
"  Comparable<Employee>{\n"
"  @Override\n"
"  int compareTo(Employee e){\n"
"    ...\n"
"  }\n"
"}\n"
"class Manager \n"
"  extends Employee\n"
"  implements\n"
"  Comparable<Manager> {\n"
"  @Override\n"
"  int compareTo(Manager m){\n"
"    ...\n"
"  }\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class Manager \n"
"  extends Employee\n"
"  implements Comparable{"
msgstr ""
"[cols=\"50a,50a\"]\n"
"|===\n"
"^|*Source code*\n"
"^|*Compiled*\n"
"|\n"
"[source,java]\n"
"----\n"
"class Employee implements\n"
"  Comparable<Employee>{\n"
"  @Override\n"
"  int compareTo(Employee e){\n"
"    ...\n"
"  }\n"
"}\n"
"class Manager \n"
"  extends Employee\n"
"  implements\n"
"  Comparable<Manager> {\n"
"  @Override\n"
"  int compareTo(Manager m){\n"
"    ...\n"
"  }\n"
"}\n"
"----\n"
"|\n"
"[source,java]\n"
"----\n"
"class Manager \n"
"  extends Employee\n"
"  implements Comparable{"

#: slides06/src/main/asciidoc/lecture.adoc:658
msgid ""
"  //bridge method for Employee\n"
"  int compareTo(Object m) {\n"
"    return compareTo((Manager) m); \n"
"  }"
msgstr ""
"  //bridge method for Employee\n"
"  int compareTo(Object m) {\n"
"    return compareTo((Manager) m); \n"
"  }"

#: slides06/src/main/asciidoc/lecture.adoc:663
msgid ""
"  //bridge method for Manager\n"
"  int compareTo(Object e) {\n"
"    return compareTo((Employee) e); \n"
"  }"
msgstr ""
"  //bridge method for Manager\n"
"  int compareTo(Object e) {\n"
"    return compareTo((Employee) e); \n"
"  }"

#: slides06/src/main/asciidoc/lecture.adoc:666
msgid ""
"  //CLASH!!!\n"
"}"
msgstr ""
"  //CLASH!!!\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:669
msgid ""
"----\n"
"|==="
msgstr ""
"----\n"
"|==="

#: slides06/src/main/asciidoc/lecture.adoc:671
msgid "== Ковариантность массивов vs инвариантность дженериков"
msgstr "== Array covariance vs generic invariance"

#: slides06/src/main/asciidoc/lecture.adoc:675
msgid ""
"[plantuml, manemp, png]\n"
"----\n"
"@startuml"
msgstr ""
"[plantuml, manemp, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:677
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:677"
msgid "skinparam dpi 150 "
msgstr "skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:679
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:679"
msgid "class Employee {"
msgstr "class Employee {"

#: slides06/src/main/asciidoc/lecture.adoc:681
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:681"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:683
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:683"
msgid "class Manager {"
msgstr "class Manager {"

#: slides06/src/main/asciidoc/lecture.adoc:685
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:685"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:687
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:687"
msgid "Employee <|- Manager"
msgstr "Employee <|- Manager"

#: slides06/src/main/asciidoc/lecture.adoc:690
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:690"
msgid ""
"@enduml\n"
"----"
msgstr ""
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:693
msgid ""
"[cols=\"50a,50a\"]\n"
"|==="
msgstr ""
"[cols=\"50a,50a\"]\n"
"|==="

#: slides06/src/main/asciidoc/lecture.adoc:695
msgid "a|"
msgstr "a|"

#: slides06/src/main/asciidoc/lecture.adoc:699
msgid ""
"[plantuml, covariance, png]\n"
"----\n"
"@startuml"
msgstr ""
"[plantuml, covariance, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:701
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:701"
msgid "skinparam dpi 150 "
msgstr "skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:704
msgid ""
"class \"Employee[]\" as E {\n"
"} "
msgstr ""
"class \"Employee[]\" as E {\n"
"} "

#: slides06/src/main/asciidoc/lecture.adoc:706
msgid "note \"Контроль типов\\nв рантайме\" as ArrayNote"
msgstr "note \"Type check\\nin runtime\" as ArrayNote"

#: slides06/src/main/asciidoc/lecture.adoc:708
msgid "E .. ArrayNote"
msgstr "E .. ArrayNote"

#: slides06/src/main/asciidoc/lecture.adoc:710
msgid "class \"Manager[]\" as M {"
msgstr "class \"Manager[]\" as M {"

#: slides06/src/main/asciidoc/lecture.adoc:712
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:712"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:716
msgid ""
"E <\\|- M\n"
"@enduml\n"
"----"
msgstr ""
"E <\\|- M\n"
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:729
msgid ""
"[source,java]\n"
"----\n"
"Manager[] managers = ...\n"
"Employee lowlyEmployee = ...\n"
"Employee[] e = managers;\n"
"/*ArrayStoreException in runtime*/\n"
"e[0] = lowlyEmployee;\n"
"----\n"
"a|\n"
"[plantuml, invariance, png]\n"
"----\n"
"@startuml"
msgstr ""
"[source,java]\n"
"----\n"
"Manager[] managers = ...\n"
"Employee lowlyEmployee = ...\n"
"Employee[] e = managers;\n"
"/*ArrayStoreException in runtime*/\n"
"e[0] = lowlyEmployee;\n"
"----\n"
"a|\n"
"[plantuml, invariance, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:731
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:731"
msgid "skinparam dpi 150 "
msgstr "skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:735
msgid ""
"class \"List<Employee>\"{\n"
"}"
msgstr ""
"class \"List<Employee>\"{\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:738
msgid ""
"class \"List<Manager>\"{ \n"
"}"
msgstr ""
"class \"List<Manager>\"{ \n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:740
msgid "note \"Не связаны\\nнаследованием!\" as Note"
msgstr "note \"Not related\\nby inheritance!\" as Note"

#: slides06/src/main/asciidoc/lecture.adoc:745
msgid ""
"\"List<Employee>\" .. Note\n"
"\"List<Manager>\" .. Note\n"
"@enduml\n"
"----"
msgstr ""
"\"List<Employee>\" .. Note\n"
"\"List<Manager>\" .. Note\n"
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:754
msgid ""
"[source,java]\n"
"----\n"
"List<Manager> managers = ...\n"
"Employee lowlyEmployee = ...\n"
"/*Тупо не скомпилируется*/\n"
"List<Employee> e = managers;\n"
"----\n"
"|==="
msgstr ""
"[source,java]\n"
"----\n"
"List<Manager> managers = ...\n"
"Employee lowlyEmployee = ...\n"
"/*Just won't compile*/\n"
"List<Employee> e = managers;\n"
"----\n"
"|==="

#: slides06/src/main/asciidoc/lecture.adoc:757
msgid "== Реальная картина "
msgstr "== Real picture "

#: slides06/src/main/asciidoc/lecture.adoc:761
msgid ""
"[plantuml, realpicture, png]\n"
"----\n"
"@startuml"
msgstr ""
"[plantuml, realpicture, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:763
msgid "skinparam dpi 170 "
msgstr "skinparam dpi 170 "

#: slides06/src/main/asciidoc/lecture.adoc:766
msgid ""
"class \"ArrayList<Employee>\"{\n"
"}"
msgstr ""
"class \"ArrayList<Employee>\"{\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:769
msgid ""
"class \"ArrayList<Manager>\"{ \n"
"}"
msgstr ""
"class \"ArrayList<Manager>\"{ \n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:772
msgid ""
"class \"ArrayList\" {\n"
"}"
msgstr ""
"class \"ArrayList\" {\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:775
msgid ""
"interface \"List<Employee>\"{\n"
"}"
msgstr ""
"interface \"List<Employee>\"{\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:778
msgid ""
"interface \"List<Manager>\"{ \n"
"}"
msgstr ""
"interface \"List<Manager>\"{ \n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:781
msgid ""
"interface \"List\"{\n"
"}"
msgstr ""
"interface \"List\"{\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:783
msgid "note \"Сырые типы.\\nИспользовать нельзя!\" as Note"
msgstr "note \"Row types.\\nCan't be used!\" as Note"

#: slides06/src/main/asciidoc/lecture.adoc:790
msgid ""
"\"List<Employee>\" <|.. \"ArrayList<Employee>\"  \n"
"\"List<Manager>\" <|.. \"ArrayList<Manager>\"  \n"
"\"ArrayList\" <|-- \"ArrayList<Employee>\"  \n"
"\"ArrayList\" <|-- \"ArrayList<Manager>\"  \n"
"\"List\" <|-- \"List<Employee>\"\n"
"\"List\" <|-- \"List<Manager>\""
msgstr ""
"\"List<Employee>\" <|.. \"ArrayList<Employee>\"  \n"
"\"List<Manager>\" <|.. \"ArrayList<Manager>\"  \n"
"\"ArrayList\" <|-- \"ArrayList<Employee>\"  \n"
"\"ArrayList\" <|-- \"ArrayList<Manager>\"  \n"
"\"List\" <|-- \"List<Employee>\"\n"
"\"List\" <|-- \"List<Manager>\""

#: slides06/src/main/asciidoc/lecture.adoc:795
msgid ""
"Note.\"List\"\n"
"Note..\"ArrayList\"\n"
"@enduml\n"
"----"
msgstr ""
"Note.\"List\"\n"
"Note..\"ArrayList\"\n"
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:797
msgid "== Как быть, если хочется такого?"
msgstr "== What if you want this?"

#: slides06/src/main/asciidoc/lecture.adoc:801
msgid ""
"[plantuml, manempperson, png]\n"
"----\n"
"@startuml"
msgstr ""
"[plantuml, manempperson, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:803
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:803"
msgid "skinparam dpi 150 "
msgstr "skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:805
msgid "class Person {"
msgstr "class Person {"

#: slides06/src/main/asciidoc/lecture.adoc:807
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:807"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:809
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:809"
msgid "class Employee {"
msgstr "class Employee {"

#: slides06/src/main/asciidoc/lecture.adoc:811
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:811"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:813
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:813"
msgid "class Manager {"
msgstr "class Manager {"

#: slides06/src/main/asciidoc/lecture.adoc:815
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:815"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:817
msgid "Person <|- Employee"
msgstr "Person <|- Employee"

#: slides06/src/main/asciidoc/lecture.adoc:819
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:819"
msgid "Employee <|- Manager"
msgstr "Employee <|- Manager"

#: slides06/src/main/asciidoc/lecture.adoc:822
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:822"
msgid ""
"@enduml\n"
"----"
msgstr ""
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:827
msgid ""
"[source,java]\n"
"----\n"
"List<Manager> managers = ...\n"
"List<Employee> employees = ..."
msgstr ""
"[source,java]\n"
"----\n"
"List<Manager> managers = ...\n"
"List<Employee> employees = ..."

#: slides06/src/main/asciidoc/lecture.adoc:831
msgid ""
"//Допустимые варианты, хотим чтоб компилировалось!\n"
"employees.addAllFrom(managers);\n"
"managers.addAllTo(employees);"
msgstr ""
"//Valid options, we want these to be compilable!\n"
"employees.addAllFrom(managers);\n"
"managers.addAllTo(employees);"

#: slides06/src/main/asciidoc/lecture.adoc:835
msgid ""
"//Недопустимые варианты, не хотим чтоб компилировалось!\n"
"managers.addAllFrom(employees);\n"
"employees.addAllTo(managers);"
msgstr ""
"//Invalid options, we don't want these to be compilable!\n"
"managers.addAllFrom(employees);\n"
"employees.addAllTo(managers);"

#: slides06/src/main/asciidoc/lecture.adoc:837
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:837"
msgid "----"
msgstr "----"

#: slides06/src/main/asciidoc/lecture.adoc:839
msgid "== Так не получится..."
msgstr "== It won't work this way..."

#: slides06/src/main/asciidoc/lecture.adoc:848
msgid ""
"[source,java]\n"
"----\n"
"//можно переносить только одинаково типизированные списки\n"
"class List<E> {\n"
"    void addAllFrom (List<E> list){\n"
"       for (Е item: list)\n"
"         add(item);\n"
"    }"
msgstr ""
"[source,java]\n"
"----\n"
"//only identically typed lists can be copied\n"
"class List<E> {\n"
"    void addAllFrom (List<E> list){\n"
"       for (Е item: list)\n"
"         add(item);\n"
"    }"

#: slides06/src/main/asciidoc/lecture.adoc:855
msgid ""
"    void addAllTo (List<E> list){\n"
"       for (E item: this)\n"
"         list.add(item);\n"
"    }\n"
"}\n"
"----"
msgstr ""
"    void addAllTo (List<E> list){\n"
"       for (E item: this)\n"
"         list.add(item);\n"
"    }\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:857
msgid "== Wildcard Types"
msgstr "== Wildcard Types"

#: slides06/src/main/asciidoc/lecture.adoc:861
msgid ""
"[plantuml, wildext, png]\n"
"----\n"
"@startuml"
msgstr ""
"[plantuml, wildext, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:863
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:863"
msgid "skinparam dpi 150 "
msgstr "skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:866
msgid ""
"class \"List<? extends Employee>\" {\n"
"}"
msgstr ""
"class \"List<? extends Employee>\" {\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:869
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:869"
msgid "class \"List<Employee>\" {"
msgstr "class \"List<Employee>\" {"

#: slides06/src/main/asciidoc/lecture.adoc:871
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:871"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:873
msgid "class \"List<Manager>\" {"
msgstr "class \"List<Manager>\" {"

#: slides06/src/main/asciidoc/lecture.adoc:875
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:875"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:877
msgid "\"List<? extends Employee>\" <|-- \"List<Employee>\""
msgstr "\"List<? extends Employee>\" <|-- \"List<Employee>\""

#: slides06/src/main/asciidoc/lecture.adoc:879
msgid "\"List<? extends Employee>\" <|-- \"List<Manager>\""
msgstr "\"List<? extends Employee>\" <|-- \"List<Manager>\""

#: slides06/src/main/asciidoc/lecture.adoc:882
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:882"
msgid ""
"@enduml\n"
"----"
msgstr ""
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:893
msgid ""
"[source,java]\n"
"----\n"
"class List<E> {\n"
"    //для List<Employee> \"пролезет\" List<Manager>!!\n"
"    void addAllFrom (List<? extends E> list){\n"
"       for (Е item: list)\n"
"         add(item);\n"
"    }\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"class List<E> {\n"
"    //List<Manager> will \"fit through\" List<Employee>!!\n"
"    void addAllFrom (List<? extends E> list){\n"
"       for (Е item: list)\n"
"         add(item);\n"
"    }\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:895
msgid "== Что можно сделать с объектом, типизированным `? extends`?"
msgstr "== What can be done with an object typed `? extends`?"

#: slides06/src/main/asciidoc/lecture.adoc:899
msgid ""
"[source,java]\n"
"----\n"
"List<? extends E> list = ..."
msgstr ""
"[source,java]\n"
"----\n"
"List<? extends E> list = ..."

#: slides06/src/main/asciidoc/lecture.adoc:902
msgid ""
"//это понятно\n"
"E e1 = list.get(...);"
msgstr ""
"//it's understandable\n"
"E e1 = list.get(...);"

#: slides06/src/main/asciidoc/lecture.adoc:909
msgid ""
"E e2 = ...;\n"
"//не скомпилируется! ПОЧЕМУ??\n"
"list.add(e2);\n"
"//скомпилируется. ПОЧЕМУ??\n"
"list.add(null); \n"
"----"
msgstr ""
"E e2 = ...;\n"
"//won't compile! WHY??\n"
"list.add(e2);\n"
"//will compile. WHY??\n"
"list.add(null); \n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:911
msgid "В общем, `addAllTo` реализовать не получится..."
msgstr "In general, `addAllTo` will not work using `? extends`..."

#: slides06/src/main/asciidoc/lecture.adoc:913
msgid "== В обратную сторону (контравариантные типы)"
msgstr "== Reverse case (contravariant types)"

#: slides06/src/main/asciidoc/lecture.adoc:917
msgid ""
"[plantuml, wildsup, png]\n"
"----\n"
"@startuml"
msgstr ""
"[plantuml, wildsup, png]\n"
"----\n"
"@startuml"

#: slides06/src/main/asciidoc/lecture.adoc:919
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:919"
msgid "skinparam dpi 150 "
msgstr "skinparam dpi 150 "

#: slides06/src/main/asciidoc/lecture.adoc:922
msgid ""
"class \"List<? super Employee>\" {\n"
"}"
msgstr ""
"class \"List<? super Employee>\" {\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:925
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:925"
msgid "class \"List<Employee>\" {"
msgstr "class \"List<Employee>\" {"

#: slides06/src/main/asciidoc/lecture.adoc:927
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:927"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:929
msgid "class \"List<Person>\" {"
msgstr "class \"List<Person>\" {"

#: slides06/src/main/asciidoc/lecture.adoc:931
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:931"
msgid "}"
msgstr "}"

#: slides06/src/main/asciidoc/lecture.adoc:933
msgid "\"List<? super Employee>\" <|-- \"List<Person>\""
msgstr "\"List<? super Employee>\" <|-- \"List<Person>\""

#: slides06/src/main/asciidoc/lecture.adoc:935
msgid "\"List<? super Employee>\" <|-- \"List<Employee>\""
msgstr "\"List<? super Employee>\" <|-- \"List<Employee>\""

#: slides06/src/main/asciidoc/lecture.adoc:938
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:938"
msgid ""
"@enduml\n"
"----"
msgstr ""
"@enduml\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:949
msgid ""
"[source,java]\n"
"----\n"
"class List<E> {\n"
"    //для List<Employee> \"пролезет\" List<Person>!!\n"
"    void addAllTo (List<? super E> list){\n"
"       for (Е item: this)\n"
"         list.add(item);\n"
"    }\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"class List<E> {\n"
"    //List<Person> will \"fit through\" List<Employee>!!\n"
"    void addAllTo (List<? super E> list){\n"
"       for (Е item: this)\n"
"         list.add(item);\n"
"    }\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:951
msgid "== Что можно сделать с объектом, типизированным `? super`?"
msgstr "== What can be done with an object typed `? super`?"

#: slides06/src/main/asciidoc/lecture.adoc:955
msgid ""
"[source,java]\n"
"----\n"
"List<? super E> list = ..."
msgstr ""
"[source,java]\n"
"----\n"
"List<? super E> list = ..."

#: slides06/src/main/asciidoc/lecture.adoc:960
msgid ""
"E e1 = ...;\n"
"//скомпилируется!\n"
"list.add(e1);\n"
"list.add(null);"
msgstr ""
"E e1 = ...;\n"
"//will compile!\n"
"list.add(e1);\n"
"list.add(null);"

#: slides06/src/main/asciidoc/lecture.adoc:964
msgid ""
"//Только Object. ПОЧЕМУ??\n"
"Object e2 = list.get(...);\n"
"----"
msgstr ""
"//Just Object. WHY??\n"
"Object e2 = list.get(...);\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:966
msgid "== Unbounded wildcard"
msgstr "== Unbounded wildcard"

#: slides06/src/main/asciidoc/lecture.adoc:970
msgid ""
"* `List<?>` -- это то же, что `List<? extends Object>`. (Вопрос: почему не "
"`<? super Object>`?)\n"
"* Брать элементы можем, но тип только `Object`.\n"
"* Класть можем только null."
msgstr ""
"* `List<?>` -- is the same as `List<? extends Object>`. (Question: why not "
"`<? super Object>`?)\n"
"* We can read elements, but only as `Object`.\n"
"* We can put only `null`s."

#: slides06/src/main/asciidoc/lecture.adoc:972
msgid "== Мнемоническое правило"
msgstr "== Mnemonic rule"

#: slides06/src/main/asciidoc/lecture.adoc:974
msgid "*PECS*"
msgstr "*PECS*"

#: slides06/src/main/asciidoc/lecture.adoc:976
msgid "*Producer Extends, Consumer Super*"
msgstr "*Producer Extends, Consumer Super*"

#: slides06/src/main/asciidoc/lecture.adoc:981
msgid ""
"[source,java]\n"
"----\n"
"public static <T> max (Collection<? extends T> coll,\n"
"                       Comparator<? super T> comp)"
msgstr ""
"[source,java]\n"
"----\n"
"public static <T> max (Collection<? extends T> coll,\n"
"                       Comparator<? super T> comp)"

#: slides06/src/main/asciidoc/lecture.adoc:983
msgid "Collections.max(List<Integer>, Comparator<Number>)"
msgstr "Collections.max(List<Integer>, Comparator<Number>)"

#: slides06/src/main/asciidoc/lecture.adoc:986
msgid ""
"Collections.max(List<String>, Comparator<Object>)\n"
"----"
msgstr ""
"Collections.max(List<String>, Comparator<Object>)\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:988
msgid "== Правила использования wildcard-типов"
msgstr "== Rules for using wildcard types"

#: slides06/src/main/asciidoc/lecture.adoc:993
msgid ""
"* Используются в аргументах методов и локальных переменных.\n"
"* Невидимы пользователю API, не должны возвращаться.\n"
"* Их цель -- принимать те аргументы, которые надо принимать, и отвергать те "
"аргументы, которые надо отвергать.\n"
"* Должны быть используемы в API, иначе API будет слишком «жёстким» и "
"непригодным для использования."
msgstr ""
"* Used in method arguments and local variables.\n"
"* Should not be returned.\n"
"Their goal is to accept the arguments that need to be accepted and to reject "
"the arguments that need to be rejected.\n"
"* Must be used in the API, otherwise the API will be too \"oburate\" and "
"unusable."

#: slides06/src/main/asciidoc/lecture.adoc:995
msgid "== Wildcard Capture"
msgstr "== Wildcard Capture"

#: slides06/src/main/asciidoc/lecture.adoc:1007
msgid ""
"[source,java]\n"
"----\n"
"public static void swap(Pair<?> p) {\n"
"  Object f = p.getFirst();\n"
"  Object s = p.getSecond();\n"
"  //УУУППС!! \n"
"  // (мы знаем, что они правильного типа, \n"
"  //  но ничего не можем поделать)\n"
"  p.setFirst(...);\n"
"  p.setSecond(...);\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"public static void swap(Pair<?> p) {\n"
"  Object f = p.getFirst();\n"
"  Object s = p.getSecond();\n"
"  //УУУППС!! \n"
"  // (мы знаем, что они правильного типа, \n"
"  //  но ничего не можем поделать)\n"
"  p.setFirst(...);\n"
"  p.setSecond(...);\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:1009
msgctxt "./slides06/src/main/asciidoc/lecture.adoc:1009"
msgid "----"
msgstr "----"

#: slides06/src/main/asciidoc/lecture.adoc:1011
msgid "== Метод с type capture"
msgstr "== Method with type capture"

#: slides06/src/main/asciidoc/lecture.adoc:1017
msgid ""
"[source,java]\n"
"----\n"
"public static void swap(Pair<?> p) {\n"
"  swapHelper(p);\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"public static void swap(Pair<?> p) {\n"
"  swapHelper(p);\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:1024
msgid ""
"private static <T> void swapHelper(Pair<T> p) {\n"
"  T f = p.getFirst();\n"
"  p.setFirst(p.getSecond());\n"
"  p.setSecond(f);\n"
"}\n"
"----"
msgstr ""
"private static <T> void swapHelper(Pair<T> p) {\n"
"  T f = p.getFirst();\n"
"  p.setFirst(p.getSecond());\n"
"  p.setSecond(f);\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:1027
msgid "== Recursive Generics"
msgstr "== Recursive Generics"

#: slides06/src/main/asciidoc/lecture.adoc:1037
msgid ""
"[source,java]\n"
"----\n"
"class Holder<E, SELF extends Holder<E, SELF>>{\n"
"    E value;\n"
"    SELF setValue(E value){\n"
"        this.value = value;\n"
"        return (SELF) this;\n"
"    }\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"class Holder<E, SELF extends Holder<E, SELF>>{\n"
"    E value;\n"
"    SELF setValue(E value){\n"
"        this.value = value;\n"
"        return (SELF) this;\n"
"    }\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:1041
msgid ""
"class StringHolder extends Holder<String, StringHolder> {\n"
"    void doSmth() {...};\n"
"}"
msgstr ""
"class StringHolder extends Holder<String, StringHolder> {\n"
"    void doSmth() {...};\n"
"}"

#: slides06/src/main/asciidoc/lecture.adoc:1044
msgid ""
"new StringHolder().setValue(\"aaa\").doSmth();\n"
"----"
msgstr ""
"new StringHolder().setValue(\"aaa\").doSmth();\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:1046
msgid "== Что почитать-посмотреть"
msgstr "== What to read and watch"

#: slides06/src/main/asciidoc/lecture.adoc:1049
msgid ""
"* Полезное\n"
"** J. Bloch, Effective Java, 3rd ed. Chapter 5 -- Generics. Addison-Wesley, "
"2018"
msgstr ""
"* Useful\n"
"** J. Bloch, Effective Java, 3rd ed. Chapter 5 -- Generics. Addison-Wesley, "
"2018"

#: slides06/src/main/asciidoc/lecture.adoc:1051
msgid ""
"** https://www.youtube.com/watch?v=_0c9Fd9FacU[Александр Маторин — "
"Неочевидные Дженерики. JPoint 2016]"
msgstr ""
"** https://www.youtube.com/watch?v=_0c9Fd9FacU[Александр Маторин — "
"Неочевидные Дженерики. JPoint 2016]"

#: slides06/src/main/asciidoc/lecture.adoc:1053
msgid "* Дичь"
msgstr "* Craziness"

#: slides06/src/main/asciidoc/lecture.adoc:1055
msgid ""
"** https://dev.to/rosstate/java-is-unsound-the-industry-perspective[Ross "
"Tate. Java is Unsound: The Industry Perspective] (2017-01-24)."
msgstr ""
"** https://dev.to/rosstate/java-is-unsound-the-industry-perspective[Ross "
"Tate. Java is Unsound: The Industry Perspective] (2017-01-24)."

#: slides06/src/main/asciidoc/lecture.adoc:1057
msgid ""
"** https://habr.com/ru/post/330724/[Иван Бессонов. Тьюринг-полнота Generic "
"типов Java] (2017-08-24, на базе публикации от ноября 2016)."
msgstr ""
"** https://habr.com/ru/post/330724/[Иван Бессонов. Тьюринг-полнота Generic "
"типов Java] (2017-08-24, на базе публикации от ноября 2016)."

#: slides06/src/main/asciidoc/lecture.adoc:1059
msgid "== Nada Amin & Rose Tate's example"
msgstr "== Nada Amin & Rose Tate's example"

#: slides06/src/main/asciidoc/lecture.adoc:1080
msgid ""
"[source,java]\n"
"----\n"
"class Unsound {\n"
"  static class Constrain<A, B extends A> {}\n"
"  static class Bind<A> {\n"
"    <B extends A>\n"
"    A upcast(Constrain<A,B> constrain, B b) {\n"
"      return b;\n"
"    }\n"
"  }\n"
"  static <T,U> U coerce(T t) {\n"
"    Constrain<U,? super T> constrain = null;\n"
"    Bind<U> bind = new Bind<U>();\n"
"    return bind.upcast(constrain, t);\n"
"  }\n"
"  public static void main(String[] args) {\n"
"    String zero = Unsound.<Integer,String>coerce(0);\n"
"  }\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"class Unsound {\n"
"  static class Constrain<A, B extends A> {}\n"
"  static class Bind<A> {\n"
"    <B extends A>\n"
"    A upcast(Constrain<A,B> constrain, B b) {\n"
"      return b;\n"
"    }\n"
"  }\n"
"  static <T,U> U coerce(T t) {\n"
"    Constrain<U,? super T> constrain = null;\n"
"    Bind<U> bind = new Bind<U>();\n"
"    return bind.upcast(constrain, t);\n"
"  }\n"
"  public static void main(String[] args) {\n"
"    String zero = Unsound.<Integer,String>coerce(0);\n"
"  }\n"
"}\n"
"----"

#: slides06/src/main/asciidoc/lecture.adoc:1082
msgid "== Radu Grigore's Example"
msgstr "== Radu Grigore's Example"

#: slides06/src/main/asciidoc/lecture.adoc:1086
msgid ""
"[source,java]\n"
"----\n"
"class Sample {"
msgstr ""
"[source,java]\n"
"----\n"
"class Sample {"

#: slides06/src/main/asciidoc/lecture.adoc:1088
msgid ""
"  interface BadList<T> extends List<List<? super BadList<? super T>>> {}"
msgstr ""
"  interface BadList<T> extends List<List<? super BadList<? super T>>> {}"

#: slides06/src/main/asciidoc/lecture.adoc:1094
msgid ""
"  public static void main(String[] args) {\n"
"    BadList<? super String> badList = null;\n"
"    List<? super BadList<? super String>> list = badList;\n"
"  }\n"
"}\n"
"----"
msgstr ""
"  public static void main(String[] args) {\n"
"    BadList<? super String> badList = null;\n"
"    List<? super BadList<? super String>> list = badList;\n"
"  }\n"
"}\n"
"----"
